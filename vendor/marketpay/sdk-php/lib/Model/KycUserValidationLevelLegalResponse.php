<?php
/**
 * KycUserValidationLevelLegalResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MarketPay API
 *
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * KycUserValidationLevelLegalResponse Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class KycUserValidationLevelLegalResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'KycUserValidationLevelLegalResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'headquarters_address' => '\Swagger\Client\Model\Address',
        'legal_person_type' => 'string',
        'name' => 'string',
        'legal_representative_address' => '\Swagger\Client\Model\Address',
        'legal_representative_birthday' => 'int',
        'legal_representative_country_of_residence' => 'string',
        'legal_representative_nationality' => 'string',
        'legal_representative_email' => 'string',
        'legal_representative_first_name' => 'string',
        'legal_representative_last_name' => 'string',
        'legal_representative_proof_of_identity' => 'string',
        'statute' => 'string',
        'shareholder_declaration' => 'string',
        'proof_of_registration' => 'string',
        'person_type' => 'string',
        'id' => 'string',
        'creation_date' => 'int',
        'tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'headquarters_address' => null,
        'legal_person_type' => null,
        'name' => null,
        'legal_representative_address' => null,
        'legal_representative_birthday' => 'int64',
        'legal_representative_country_of_residence' => null,
        'legal_representative_nationality' => null,
        'legal_representative_email' => null,
        'legal_representative_first_name' => null,
        'legal_representative_last_name' => null,
        'legal_representative_proof_of_identity' => null,
        'statute' => null,
        'shareholder_declaration' => null,
        'proof_of_registration' => null,
        'person_type' => null,
        'id' => null,
        'creation_date' => 'int64',
        'tag' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'headquarters_address' => 'HeadquartersAddress',
        'legal_person_type' => 'LegalPersonType',
        'name' => 'Name',
        'legal_representative_address' => 'LegalRepresentativeAddress',
        'legal_representative_birthday' => 'LegalRepresentativeBirthday',
        'legal_representative_country_of_residence' => 'LegalRepresentativeCountryOfResidence',
        'legal_representative_nationality' => 'LegalRepresentativeNationality',
        'legal_representative_email' => 'LegalRepresentativeEmail',
        'legal_representative_first_name' => 'LegalRepresentativeFirstName',
        'legal_representative_last_name' => 'LegalRepresentativeLastName',
        'legal_representative_proof_of_identity' => 'LegalRepresentativeProofOfIdentity',
        'statute' => 'Statute',
        'shareholder_declaration' => 'ShareholderDeclaration',
        'proof_of_registration' => 'ProofOfRegistration',
        'person_type' => 'PersonType',
        'id' => 'Id',
        'creation_date' => 'CreationDate',
        'tag' => 'Tag'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'headquarters_address' => 'setHeadquartersAddress',
        'legal_person_type' => 'setLegalPersonType',
        'name' => 'setName',
        'legal_representative_address' => 'setLegalRepresentativeAddress',
        'legal_representative_birthday' => 'setLegalRepresentativeBirthday',
        'legal_representative_country_of_residence' => 'setLegalRepresentativeCountryOfResidence',
        'legal_representative_nationality' => 'setLegalRepresentativeNationality',
        'legal_representative_email' => 'setLegalRepresentativeEmail',
        'legal_representative_first_name' => 'setLegalRepresentativeFirstName',
        'legal_representative_last_name' => 'setLegalRepresentativeLastName',
        'legal_representative_proof_of_identity' => 'setLegalRepresentativeProofOfIdentity',
        'statute' => 'setStatute',
        'shareholder_declaration' => 'setShareholderDeclaration',
        'proof_of_registration' => 'setProofOfRegistration',
        'person_type' => 'setPersonType',
        'id' => 'setId',
        'creation_date' => 'setCreationDate',
        'tag' => 'setTag'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'headquarters_address' => 'getHeadquartersAddress',
        'legal_person_type' => 'getLegalPersonType',
        'name' => 'getName',
        'legal_representative_address' => 'getLegalRepresentativeAddress',
        'legal_representative_birthday' => 'getLegalRepresentativeBirthday',
        'legal_representative_country_of_residence' => 'getLegalRepresentativeCountryOfResidence',
        'legal_representative_nationality' => 'getLegalRepresentativeNationality',
        'legal_representative_email' => 'getLegalRepresentativeEmail',
        'legal_representative_first_name' => 'getLegalRepresentativeFirstName',
        'legal_representative_last_name' => 'getLegalRepresentativeLastName',
        'legal_representative_proof_of_identity' => 'getLegalRepresentativeProofOfIdentity',
        'statute' => 'getStatute',
        'shareholder_declaration' => 'getShareholderDeclaration',
        'proof_of_registration' => 'getProofOfRegistration',
        'person_type' => 'getPersonType',
        'id' => 'getId',
        'creation_date' => 'getCreationDate',
        'tag' => 'getTag'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const LEGAL_PERSON_TYPE_BUSINESS = 'BUSINESS';
    const LEGAL_PERSON_TYPE_ORGANIZATION = 'ORGANIZATION';
    const LEGAL_PERSON_TYPE_SOLETRADER = 'SOLETRADER';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NOT_SPECIFIED = 'NotSpecified';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AD = 'AD';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AE = 'AE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AF = 'AF';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AG = 'AG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AI = 'AI';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AL = 'AL';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AM = 'AM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AO = 'AO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AQ = 'AQ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AR = 'AR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE__AS = 'AS';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AT = 'AT';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AU = 'AU';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AW = 'AW';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AX = 'AX';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AZ = 'AZ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BA = 'BA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BB = 'BB';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BD = 'BD';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BE = 'BE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BF = 'BF';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BG = 'BG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BH = 'BH';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BI = 'BI';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BJ = 'BJ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BL = 'BL';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BM = 'BM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BN = 'BN';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BO = 'BO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BQ = 'BQ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BR = 'BR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BS = 'BS';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BT = 'BT';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BV = 'BV';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BW = 'BW';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BY = 'BY';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BZ = 'BZ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CA = 'CA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CC = 'CC';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CD = 'CD';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CF = 'CF';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CG = 'CG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CH = 'CH';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CI = 'CI';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CK = 'CK';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CL = 'CL';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CM = 'CM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CN = 'CN';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CO = 'CO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CR = 'CR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CU = 'CU';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CV = 'CV';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CW = 'CW';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CX = 'CX';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CY = 'CY';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CZ = 'CZ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_DE = 'DE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_DJ = 'DJ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_DK = 'DK';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_DM = 'DM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE__DO = 'DO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_DZ = 'DZ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_EC = 'EC';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_EE = 'EE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_EG = 'EG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_EH = 'EH';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ER = 'ER';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ES = 'ES';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ET = 'ET';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FI = 'FI';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FJ = 'FJ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FK = 'FK';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FM = 'FM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FO = 'FO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FR = 'FR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GA = 'GA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GB = 'GB';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GD = 'GD';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GE = 'GE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GF = 'GF';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GG = 'GG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GH = 'GH';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GI = 'GI';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GL = 'GL';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GM = 'GM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GN = 'GN';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GP = 'GP';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GQ = 'GQ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GR = 'GR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GS = 'GS';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GT = 'GT';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GU = 'GU';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GW = 'GW';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GY = 'GY';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HK = 'HK';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HM = 'HM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HN = 'HN';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HR = 'HR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HT = 'HT';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HU = 'HU';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ID = 'ID';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IE = 'IE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IL = 'IL';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IM = 'IM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IN = 'IN';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IO = 'IO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IQ = 'IQ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IR = 'IR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IS = 'IS';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IT = 'IT';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_JE = 'JE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_JM = 'JM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_JO = 'JO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_JP = 'JP';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KE = 'KE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KG = 'KG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KH = 'KH';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KI = 'KI';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KM = 'KM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KN = 'KN';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KP = 'KP';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KR = 'KR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KW = 'KW';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KY = 'KY';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KZ = 'KZ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LA = 'LA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LB = 'LB';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LC = 'LC';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LI = 'LI';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LK = 'LK';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LR = 'LR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LS = 'LS';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LT = 'LT';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LU = 'LU';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LV = 'LV';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LY = 'LY';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MA = 'MA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MC = 'MC';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MD = 'MD';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ME = 'ME';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MF = 'MF';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MG = 'MG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MH = 'MH';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MK = 'MK';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ML = 'ML';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MM = 'MM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MN = 'MN';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MO = 'MO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MP = 'MP';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MQ = 'MQ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MR = 'MR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MS = 'MS';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MT = 'MT';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MU = 'MU';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MV = 'MV';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MW = 'MW';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MX = 'MX';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MY = 'MY';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MZ = 'MZ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NA = 'NA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NC = 'NC';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NE = 'NE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NF = 'NF';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NG = 'NG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NI = 'NI';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NL = 'NL';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NO = 'NO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NP = 'NP';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NR = 'NR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NU = 'NU';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NZ = 'NZ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_OM = 'OM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PA = 'PA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PE = 'PE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PF = 'PF';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PG = 'PG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PH = 'PH';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PK = 'PK';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PL = 'PL';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PM = 'PM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PN = 'PN';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PR = 'PR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PS = 'PS';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PT = 'PT';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PW = 'PW';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PY = 'PY';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_QA = 'QA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_RE = 'RE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_RO = 'RO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_RS = 'RS';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_RU = 'RU';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_RW = 'RW';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SA = 'SA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SB = 'SB';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SC = 'SC';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SD = 'SD';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SE = 'SE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SG = 'SG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SH = 'SH';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SI = 'SI';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SJ = 'SJ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SK = 'SK';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SL = 'SL';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SM = 'SM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SN = 'SN';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SO = 'SO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SR = 'SR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SS = 'SS';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ST = 'ST';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SV = 'SV';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SX = 'SX';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SY = 'SY';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SZ = 'SZ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TC = 'TC';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TD = 'TD';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TF = 'TF';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TG = 'TG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TH = 'TH';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TJ = 'TJ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TK = 'TK';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TL = 'TL';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TM = 'TM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TN = 'TN';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TO = 'TO';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TR = 'TR';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TT = 'TT';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TV = 'TV';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TW = 'TW';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TZ = 'TZ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_UA = 'UA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_UG = 'UG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_UM = 'UM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_US = 'US';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_UY = 'UY';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_UZ = 'UZ';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VA = 'VA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VC = 'VC';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VE = 'VE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VG = 'VG';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VI = 'VI';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VN = 'VN';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VU = 'VU';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_WF = 'WF';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_WS = 'WS';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_YE = 'YE';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_YT = 'YT';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ZA = 'ZA';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ZM = 'ZM';
    const LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ZW = 'ZW';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NOT_SPECIFIED = 'NotSpecified';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AD = 'AD';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AE = 'AE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AF = 'AF';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AG = 'AG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AI = 'AI';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AL = 'AL';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AM = 'AM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AO = 'AO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AQ = 'AQ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AR = 'AR';
    const LEGAL_REPRESENTATIVE_NATIONALITY__AS = 'AS';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AT = 'AT';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AU = 'AU';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AW = 'AW';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AX = 'AX';
    const LEGAL_REPRESENTATIVE_NATIONALITY_AZ = 'AZ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BA = 'BA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BB = 'BB';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BD = 'BD';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BE = 'BE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BF = 'BF';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BG = 'BG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BH = 'BH';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BI = 'BI';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BJ = 'BJ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BL = 'BL';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BM = 'BM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BN = 'BN';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BO = 'BO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BQ = 'BQ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BR = 'BR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BS = 'BS';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BT = 'BT';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BV = 'BV';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BW = 'BW';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BY = 'BY';
    const LEGAL_REPRESENTATIVE_NATIONALITY_BZ = 'BZ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CA = 'CA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CC = 'CC';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CD = 'CD';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CF = 'CF';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CG = 'CG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CH = 'CH';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CI = 'CI';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CK = 'CK';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CL = 'CL';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CM = 'CM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CN = 'CN';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CO = 'CO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CR = 'CR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CU = 'CU';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CV = 'CV';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CW = 'CW';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CX = 'CX';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CY = 'CY';
    const LEGAL_REPRESENTATIVE_NATIONALITY_CZ = 'CZ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_DE = 'DE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_DJ = 'DJ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_DK = 'DK';
    const LEGAL_REPRESENTATIVE_NATIONALITY_DM = 'DM';
    const LEGAL_REPRESENTATIVE_NATIONALITY__DO = 'DO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_DZ = 'DZ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_EC = 'EC';
    const LEGAL_REPRESENTATIVE_NATIONALITY_EE = 'EE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_EG = 'EG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_EH = 'EH';
    const LEGAL_REPRESENTATIVE_NATIONALITY_ER = 'ER';
    const LEGAL_REPRESENTATIVE_NATIONALITY_ES = 'ES';
    const LEGAL_REPRESENTATIVE_NATIONALITY_ET = 'ET';
    const LEGAL_REPRESENTATIVE_NATIONALITY_FI = 'FI';
    const LEGAL_REPRESENTATIVE_NATIONALITY_FJ = 'FJ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_FK = 'FK';
    const LEGAL_REPRESENTATIVE_NATIONALITY_FM = 'FM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_FO = 'FO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_FR = 'FR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GA = 'GA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GB = 'GB';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GD = 'GD';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GE = 'GE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GF = 'GF';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GG = 'GG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GH = 'GH';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GI = 'GI';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GL = 'GL';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GM = 'GM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GN = 'GN';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GP = 'GP';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GQ = 'GQ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GR = 'GR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GS = 'GS';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GT = 'GT';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GU = 'GU';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GW = 'GW';
    const LEGAL_REPRESENTATIVE_NATIONALITY_GY = 'GY';
    const LEGAL_REPRESENTATIVE_NATIONALITY_HK = 'HK';
    const LEGAL_REPRESENTATIVE_NATIONALITY_HM = 'HM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_HN = 'HN';
    const LEGAL_REPRESENTATIVE_NATIONALITY_HR = 'HR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_HT = 'HT';
    const LEGAL_REPRESENTATIVE_NATIONALITY_HU = 'HU';
    const LEGAL_REPRESENTATIVE_NATIONALITY_ID = 'ID';
    const LEGAL_REPRESENTATIVE_NATIONALITY_IE = 'IE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_IL = 'IL';
    const LEGAL_REPRESENTATIVE_NATIONALITY_IM = 'IM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_IN = 'IN';
    const LEGAL_REPRESENTATIVE_NATIONALITY_IO = 'IO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_IQ = 'IQ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_IR = 'IR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_IS = 'IS';
    const LEGAL_REPRESENTATIVE_NATIONALITY_IT = 'IT';
    const LEGAL_REPRESENTATIVE_NATIONALITY_JE = 'JE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_JM = 'JM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_JO = 'JO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_JP = 'JP';
    const LEGAL_REPRESENTATIVE_NATIONALITY_KE = 'KE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_KG = 'KG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_KH = 'KH';
    const LEGAL_REPRESENTATIVE_NATIONALITY_KI = 'KI';
    const LEGAL_REPRESENTATIVE_NATIONALITY_KM = 'KM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_KN = 'KN';
    const LEGAL_REPRESENTATIVE_NATIONALITY_KP = 'KP';
    const LEGAL_REPRESENTATIVE_NATIONALITY_KR = 'KR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_KW = 'KW';
    const LEGAL_REPRESENTATIVE_NATIONALITY_KY = 'KY';
    const LEGAL_REPRESENTATIVE_NATIONALITY_KZ = 'KZ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_LA = 'LA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_LB = 'LB';
    const LEGAL_REPRESENTATIVE_NATIONALITY_LC = 'LC';
    const LEGAL_REPRESENTATIVE_NATIONALITY_LI = 'LI';
    const LEGAL_REPRESENTATIVE_NATIONALITY_LK = 'LK';
    const LEGAL_REPRESENTATIVE_NATIONALITY_LR = 'LR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_LS = 'LS';
    const LEGAL_REPRESENTATIVE_NATIONALITY_LT = 'LT';
    const LEGAL_REPRESENTATIVE_NATIONALITY_LU = 'LU';
    const LEGAL_REPRESENTATIVE_NATIONALITY_LV = 'LV';
    const LEGAL_REPRESENTATIVE_NATIONALITY_LY = 'LY';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MA = 'MA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MC = 'MC';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MD = 'MD';
    const LEGAL_REPRESENTATIVE_NATIONALITY_ME = 'ME';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MF = 'MF';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MG = 'MG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MH = 'MH';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MK = 'MK';
    const LEGAL_REPRESENTATIVE_NATIONALITY_ML = 'ML';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MM = 'MM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MN = 'MN';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MO = 'MO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MP = 'MP';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MQ = 'MQ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MR = 'MR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MS = 'MS';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MT = 'MT';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MU = 'MU';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MV = 'MV';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MW = 'MW';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MX = 'MX';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MY = 'MY';
    const LEGAL_REPRESENTATIVE_NATIONALITY_MZ = 'MZ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NA = 'NA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NC = 'NC';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NE = 'NE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NF = 'NF';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NG = 'NG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NI = 'NI';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NL = 'NL';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NO = 'NO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NP = 'NP';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NR = 'NR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NU = 'NU';
    const LEGAL_REPRESENTATIVE_NATIONALITY_NZ = 'NZ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_OM = 'OM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PA = 'PA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PE = 'PE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PF = 'PF';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PG = 'PG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PH = 'PH';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PK = 'PK';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PL = 'PL';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PM = 'PM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PN = 'PN';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PR = 'PR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PS = 'PS';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PT = 'PT';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PW = 'PW';
    const LEGAL_REPRESENTATIVE_NATIONALITY_PY = 'PY';
    const LEGAL_REPRESENTATIVE_NATIONALITY_QA = 'QA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_RE = 'RE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_RO = 'RO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_RS = 'RS';
    const LEGAL_REPRESENTATIVE_NATIONALITY_RU = 'RU';
    const LEGAL_REPRESENTATIVE_NATIONALITY_RW = 'RW';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SA = 'SA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SB = 'SB';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SC = 'SC';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SD = 'SD';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SE = 'SE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SG = 'SG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SH = 'SH';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SI = 'SI';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SJ = 'SJ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SK = 'SK';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SL = 'SL';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SM = 'SM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SN = 'SN';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SO = 'SO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SR = 'SR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SS = 'SS';
    const LEGAL_REPRESENTATIVE_NATIONALITY_ST = 'ST';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SV = 'SV';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SX = 'SX';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SY = 'SY';
    const LEGAL_REPRESENTATIVE_NATIONALITY_SZ = 'SZ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TC = 'TC';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TD = 'TD';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TF = 'TF';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TG = 'TG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TH = 'TH';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TJ = 'TJ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TK = 'TK';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TL = 'TL';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TM = 'TM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TN = 'TN';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TO = 'TO';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TR = 'TR';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TT = 'TT';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TV = 'TV';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TW = 'TW';
    const LEGAL_REPRESENTATIVE_NATIONALITY_TZ = 'TZ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_UA = 'UA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_UG = 'UG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_UM = 'UM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_US = 'US';
    const LEGAL_REPRESENTATIVE_NATIONALITY_UY = 'UY';
    const LEGAL_REPRESENTATIVE_NATIONALITY_UZ = 'UZ';
    const LEGAL_REPRESENTATIVE_NATIONALITY_VA = 'VA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_VC = 'VC';
    const LEGAL_REPRESENTATIVE_NATIONALITY_VE = 'VE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_VG = 'VG';
    const LEGAL_REPRESENTATIVE_NATIONALITY_VI = 'VI';
    const LEGAL_REPRESENTATIVE_NATIONALITY_VN = 'VN';
    const LEGAL_REPRESENTATIVE_NATIONALITY_VU = 'VU';
    const LEGAL_REPRESENTATIVE_NATIONALITY_WF = 'WF';
    const LEGAL_REPRESENTATIVE_NATIONALITY_WS = 'WS';
    const LEGAL_REPRESENTATIVE_NATIONALITY_YE = 'YE';
    const LEGAL_REPRESENTATIVE_NATIONALITY_YT = 'YT';
    const LEGAL_REPRESENTATIVE_NATIONALITY_ZA = 'ZA';
    const LEGAL_REPRESENTATIVE_NATIONALITY_ZM = 'ZM';
    const LEGAL_REPRESENTATIVE_NATIONALITY_ZW = 'ZW';
    const PERSON_TYPE_NATURAL = 'Natural';
    const PERSON_TYPE_LEGAL = 'Legal';
    const PERSON_TYPE_FEES = 'Fees';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLegalPersonTypeAllowableValues()
    {
        return [
            self::LEGAL_PERSON_TYPE_BUSINESS,
            self::LEGAL_PERSON_TYPE_ORGANIZATION,
            self::LEGAL_PERSON_TYPE_SOLETRADER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLegalRepresentativeCountryOfResidenceAllowableValues()
    {
        return [
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NOT_SPECIFIED,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AD,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AF,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AI,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AL,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AQ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE__AS,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AT,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AU,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AW,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AX,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_AZ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BB,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BD,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BF,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BH,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BI,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BJ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BL,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BN,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BQ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BS,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BT,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BV,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BW,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BY,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_BZ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CC,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CD,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CF,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CH,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CI,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CK,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CL,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CN,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CU,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CV,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CW,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CX,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CY,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_CZ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_DE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_DJ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_DK,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_DM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE__DO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_DZ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_EC,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_EE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_EG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_EH,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ER,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ES,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ET,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FI,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FJ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FK,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_FR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GB,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GD,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GF,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GH,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GI,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GL,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GN,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GP,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GQ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GS,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GT,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GU,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GW,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_GY,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HK,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HN,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HT,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_HU,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ID,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IL,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IN,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IQ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IS,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_IT,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_JE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_JM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_JO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_JP,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KH,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KI,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KN,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KP,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KW,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KY,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_KZ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LB,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LC,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LI,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LK,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LS,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LT,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LU,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LV,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_LY,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MC,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MD,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ME,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MF,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MH,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MK,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ML,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MN,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MP,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MQ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MS,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MT,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MU,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MV,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MW,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MX,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MY,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_MZ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NC,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NF,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NI,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NL,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NP,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NU,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_NZ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_OM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PF,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PH,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PK,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PL,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PN,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PS,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PT,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PW,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_PY,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_QA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_RE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_RO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_RS,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_RU,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_RW,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SB,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SC,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SD,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SH,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SI,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SJ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SK,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SL,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SN,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SS,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ST,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SV,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SX,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SY,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_SZ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TC,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TD,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TF,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TH,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TJ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TK,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TL,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TN,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TO,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TR,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TT,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TV,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TW,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_TZ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_UA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_UG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_UM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_US,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_UY,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_UZ,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VC,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VG,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VI,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VN,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_VU,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_WF,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_WS,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_YE,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_YT,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ZA,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ZM,
            self::LEGAL_REPRESENTATIVE_COUNTRY_OF_RESIDENCE_ZW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLegalRepresentativeNationalityAllowableValues()
    {
        return [
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NOT_SPECIFIED,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AD,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AF,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AI,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AL,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AQ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY__AS,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AT,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AU,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AW,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AX,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_AZ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BB,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BD,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BF,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BH,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BI,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BJ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BL,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BN,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BQ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BS,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BT,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BV,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BW,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BY,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_BZ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CC,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CD,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CF,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CH,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CI,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CK,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CL,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CN,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CU,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CV,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CW,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CX,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CY,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_CZ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_DE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_DJ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_DK,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_DM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY__DO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_DZ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_EC,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_EE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_EG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_EH,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_ER,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_ES,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_ET,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_FI,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_FJ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_FK,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_FM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_FO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_FR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GB,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GD,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GF,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GH,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GI,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GL,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GN,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GP,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GQ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GS,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GT,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GU,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GW,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_GY,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_HK,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_HM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_HN,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_HR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_HT,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_HU,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_ID,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_IE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_IL,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_IM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_IN,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_IO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_IQ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_IR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_IS,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_IT,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_JE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_JM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_JO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_JP,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_KE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_KG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_KH,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_KI,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_KM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_KN,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_KP,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_KR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_KW,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_KY,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_KZ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_LA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_LB,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_LC,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_LI,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_LK,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_LR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_LS,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_LT,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_LU,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_LV,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_LY,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MC,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MD,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_ME,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MF,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MH,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MK,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_ML,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MN,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MP,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MQ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MS,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MT,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MU,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MV,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MW,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MX,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MY,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_MZ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NC,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NF,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NI,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NL,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NP,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NU,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_NZ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_OM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PF,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PH,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PK,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PL,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PN,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PS,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PT,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PW,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_PY,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_QA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_RE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_RO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_RS,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_RU,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_RW,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SB,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SC,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SD,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SH,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SI,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SJ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SK,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SL,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SN,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SS,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_ST,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SV,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SX,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SY,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_SZ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TC,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TD,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TF,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TH,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TJ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TK,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TL,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TN,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TO,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TR,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TT,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TV,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TW,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_TZ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_UA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_UG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_UM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_US,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_UY,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_UZ,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_VA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_VC,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_VE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_VG,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_VI,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_VN,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_VU,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_WF,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_WS,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_YE,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_YT,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_ZA,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_ZM,
            self::LEGAL_REPRESENTATIVE_NATIONALITY_ZW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPersonTypeAllowableValues()
    {
        return [
            self::PERSON_TYPE_NATURAL,
            self::PERSON_TYPE_LEGAL,
            self::PERSON_TYPE_FEES,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['headquarters_address'] = isset($data['headquarters_address']) ? $data['headquarters_address'] : null;
        $this->container['legal_person_type'] = isset($data['legal_person_type']) ? $data['legal_person_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['legal_representative_address'] = isset($data['legal_representative_address']) ? $data['legal_representative_address'] : null;
        $this->container['legal_representative_birthday'] = isset($data['legal_representative_birthday']) ? $data['legal_representative_birthday'] : null;
        $this->container['legal_representative_country_of_residence'] = isset($data['legal_representative_country_of_residence']) ? $data['legal_representative_country_of_residence'] : null;
        $this->container['legal_representative_nationality'] = isset($data['legal_representative_nationality']) ? $data['legal_representative_nationality'] : null;
        $this->container['legal_representative_email'] = isset($data['legal_representative_email']) ? $data['legal_representative_email'] : null;
        $this->container['legal_representative_first_name'] = isset($data['legal_representative_first_name']) ? $data['legal_representative_first_name'] : null;
        $this->container['legal_representative_last_name'] = isset($data['legal_representative_last_name']) ? $data['legal_representative_last_name'] : null;
        $this->container['legal_representative_proof_of_identity'] = isset($data['legal_representative_proof_of_identity']) ? $data['legal_representative_proof_of_identity'] : null;
        $this->container['statute'] = isset($data['statute']) ? $data['statute'] : null;
        $this->container['shareholder_declaration'] = isset($data['shareholder_declaration']) ? $data['shareholder_declaration'] : null;
        $this->container['proof_of_registration'] = isset($data['proof_of_registration']) ? $data['proof_of_registration'] : null;
        $this->container['person_type'] = isset($data['person_type']) ? $data['person_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getLegalPersonTypeAllowableValues();
        if (!in_array($this->container['legal_person_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'legal_person_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getLegalRepresentativeCountryOfResidenceAllowableValues();
        if (!in_array($this->container['legal_representative_country_of_residence'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'legal_representative_country_of_residence', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getLegalRepresentativeNationalityAllowableValues();
        if (!in_array($this->container['legal_representative_nationality'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'legal_representative_nationality', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getPersonTypeAllowableValues();
        if (!in_array($this->container['person_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'person_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getLegalPersonTypeAllowableValues();
        if (!in_array($this->container['legal_person_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getLegalRepresentativeCountryOfResidenceAllowableValues();
        if (!in_array($this->container['legal_representative_country_of_residence'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getLegalRepresentativeNationalityAllowableValues();
        if (!in_array($this->container['legal_representative_nationality'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getPersonTypeAllowableValues();
        if (!in_array($this->container['person_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets headquarters_address
     * @return \Swagger\Client\Model\Address
     */
    public function getHeadquartersAddress()
    {
        return $this->container['headquarters_address'];
    }

    /**
     * Sets headquarters_address
     * @param \Swagger\Client\Model\Address $headquarters_address The address of the company’s headquarters
     * @return $this
     */
    public function setHeadquartersAddress($headquarters_address)
    {
        $this->container['headquarters_address'] = $headquarters_address;

        return $this;
    }

    /**
     * Gets legal_person_type
     * @return string
     */
    public function getLegalPersonType()
    {
        return $this->container['legal_person_type'];
    }

    /**
     * Sets legal_person_type
     * @param string $legal_person_type The type of legal user
     * @return $this
     */
    public function setLegalPersonType($legal_person_type)
    {
        $allowed_values = $this->getLegalPersonTypeAllowableValues();
        if (!is_null($legal_person_type) && !in_array($legal_person_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'legal_person_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['legal_person_type'] = $legal_person_type;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the legal user
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets legal_representative_address
     * @return \Swagger\Client\Model\Address
     */
    public function getLegalRepresentativeAddress()
    {
        return $this->container['legal_representative_address'];
    }

    /**
     * Sets legal_representative_address
     * @param \Swagger\Client\Model\Address $legal_representative_address The address of the company’s Legal representative person
     * @return $this
     */
    public function setLegalRepresentativeAddress($legal_representative_address)
    {
        $this->container['legal_representative_address'] = $legal_representative_address;

        return $this;
    }

    /**
     * Gets legal_representative_birthday
     * @return int
     */
    public function getLegalRepresentativeBirthday()
    {
        return $this->container['legal_representative_birthday'];
    }

    /**
     * Sets legal_representative_birthday
     * @param int $legal_representative_birthday The date of birth of the company’s Legal representative person - be careful to set the right timezone (should be UTC) to avoid 00h becoming 23h (and hence interpreted as the day before)
     * @return $this
     */
    public function setLegalRepresentativeBirthday($legal_representative_birthday)
    {
        $this->container['legal_representative_birthday'] = $legal_representative_birthday;

        return $this;
    }

    /**
     * Gets legal_representative_country_of_residence
     * @return string
     */
    public function getLegalRepresentativeCountryOfResidence()
    {
        return $this->container['legal_representative_country_of_residence'];
    }

    /**
     * Sets legal_representative_country_of_residence
     * @param string $legal_representative_country_of_residence The country of residence of the company’s Legal representative person
     * @return $this
     */
    public function setLegalRepresentativeCountryOfResidence($legal_representative_country_of_residence)
    {
        $allowed_values = $this->getLegalRepresentativeCountryOfResidenceAllowableValues();
        if (!is_null($legal_representative_country_of_residence) && !in_array($legal_representative_country_of_residence, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'legal_representative_country_of_residence', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['legal_representative_country_of_residence'] = $legal_representative_country_of_residence;

        return $this;
    }

    /**
     * Gets legal_representative_nationality
     * @return string
     */
    public function getLegalRepresentativeNationality()
    {
        return $this->container['legal_representative_nationality'];
    }

    /**
     * Sets legal_representative_nationality
     * @param string $legal_representative_nationality The nationality of the company’s Legal representative person
     * @return $this
     */
    public function setLegalRepresentativeNationality($legal_representative_nationality)
    {
        $allowed_values = $this->getLegalRepresentativeNationalityAllowableValues();
        if (!is_null($legal_representative_nationality) && !in_array($legal_representative_nationality, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'legal_representative_nationality', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['legal_representative_nationality'] = $legal_representative_nationality;

        return $this;
    }

    /**
     * Gets legal_representative_email
     * @return string
     */
    public function getLegalRepresentativeEmail()
    {
        return $this->container['legal_representative_email'];
    }

    /**
     * Sets legal_representative_email
     * @param string $legal_representative_email The email of the company’s Legal representative person - must be a valid
     * @return $this
     */
    public function setLegalRepresentativeEmail($legal_representative_email)
    {
        $this->container['legal_representative_email'] = $legal_representative_email;

        return $this;
    }

    /**
     * Gets legal_representative_first_name
     * @return string
     */
    public function getLegalRepresentativeFirstName()
    {
        return $this->container['legal_representative_first_name'];
    }

    /**
     * Sets legal_representative_first_name
     * @param string $legal_representative_first_name The firstname of the company’s Legal representative person
     * @return $this
     */
    public function setLegalRepresentativeFirstName($legal_representative_first_name)
    {
        $this->container['legal_representative_first_name'] = $legal_representative_first_name;

        return $this;
    }

    /**
     * Gets legal_representative_last_name
     * @return string
     */
    public function getLegalRepresentativeLastName()
    {
        return $this->container['legal_representative_last_name'];
    }

    /**
     * Sets legal_representative_last_name
     * @param string $legal_representative_last_name The lastname of the company’s Legal representative person
     * @return $this
     */
    public function setLegalRepresentativeLastName($legal_representative_last_name)
    {
        $this->container['legal_representative_last_name'] = $legal_representative_last_name;

        return $this;
    }

    /**
     * Gets legal_representative_proof_of_identity
     * @return string
     */
    public function getLegalRepresentativeProofOfIdentity()
    {
        return $this->container['legal_representative_proof_of_identity'];
    }

    /**
     * Sets legal_representative_proof_of_identity
     * @param string $legal_representative_proof_of_identity Legal Representative Proof Of Identity
     * @return $this
     */
    public function setLegalRepresentativeProofOfIdentity($legal_representative_proof_of_identity)
    {
        $this->container['legal_representative_proof_of_identity'] = $legal_representative_proof_of_identity;

        return $this;
    }

    /**
     * Gets statute
     * @return string
     */
    public function getStatute()
    {
        return $this->container['statute'];
    }

    /**
     * Sets statute
     * @param string $statute Statute
     * @return $this
     */
    public function setStatute($statute)
    {
        $this->container['statute'] = $statute;

        return $this;
    }

    /**
     * Gets shareholder_declaration
     * @return string
     */
    public function getShareholderDeclaration()
    {
        return $this->container['shareholder_declaration'];
    }

    /**
     * Sets shareholder_declaration
     * @param string $shareholder_declaration Shareholder declaration
     * @return $this
     */
    public function setShareholderDeclaration($shareholder_declaration)
    {
        $this->container['shareholder_declaration'] = $shareholder_declaration;

        return $this;
    }

    /**
     * Gets proof_of_registration
     * @return string
     */
    public function getProofOfRegistration()
    {
        return $this->container['proof_of_registration'];
    }

    /**
     * Sets proof_of_registration
     * @param string $proof_of_registration Proof of registration
     * @return $this
     */
    public function setProofOfRegistration($proof_of_registration)
    {
        $this->container['proof_of_registration'] = $proof_of_registration;

        return $this;
    }

    /**
     * Gets person_type
     * @return string
     */
    public function getPersonType()
    {
        return $this->container['person_type'];
    }

    /**
     * Sets person_type
     * @param string $person_type Type of user
     * @return $this
     */
    public function setPersonType($person_type)
    {
        $allowed_values = $this->getPersonTypeAllowableValues();
        if (!is_null($person_type) && !in_array($person_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'person_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['person_type'] = $person_type;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The item's ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets creation_date
     * @return int
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param int $creation_date When the item was created
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets tag
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param string $tag Custom data that you can add to this item
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


