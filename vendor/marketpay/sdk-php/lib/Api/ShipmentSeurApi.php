<?php
/**
 * ShipmentSeurApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MarketPay API
 *
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ShipmentSeurApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentSeurApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ShipmentSeurApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation shipmentSeurSeurCancelShipment
     *
     * Cancels a shipment
     *
     * @param int $shipment_id The Id of a Shipment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SeurShipmentCancellationResponse
     */
    public function shipmentSeurSeurCancelShipment($shipment_id)
    {
        list($response) = $this->shipmentSeurSeurCancelShipmentWithHttpInfo($shipment_id);
        return $response;
    }

    /**
     * Operation shipmentSeurSeurCancelShipmentWithHttpInfo
     *
     * Cancels a shipment
     *
     * @param int $shipment_id The Id of a Shipment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SeurShipmentCancellationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentSeurSeurCancelShipmentWithHttpInfo($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shipment_id when calling shipmentSeurSeurCancelShipment');
        }
        // parse inputs
        $resourcePath = "/v2.01/ShipmentSeur/shipments/{ShipmentId}/cancellation";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                "{" . "ShipmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($shipment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SeurShipmentCancellationResponse',
                '/v2.01/ShipmentSeur/shipments/{ShipmentId}/cancellation'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SeurShipmentCancellationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SeurShipmentCancellationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation shipmentSeurSeurCreateShipment
     *
     * Creates a shipment
     *
     * @param \Swagger\Client\Model\SeurShipmentPost $shipment Seur Shipment Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SeurShipmentResponse
     */
    public function shipmentSeurSeurCreateShipment($shipment = null)
    {
        list($response) = $this->shipmentSeurSeurCreateShipmentWithHttpInfo($shipment);
        return $response;
    }

    /**
     * Operation shipmentSeurSeurCreateShipmentWithHttpInfo
     *
     * Creates a shipment
     *
     * @param \Swagger\Client\Model\SeurShipmentPost $shipment Seur Shipment Object params (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SeurShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentSeurSeurCreateShipmentWithHttpInfo($shipment = null)
    {
        // parse inputs
        $resourcePath = "/v2.01/ShipmentSeur/shipments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'application/json-patch+json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($shipment)) {
            $_tempBody = $shipment;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SeurShipmentResponse',
                '/v2.01/ShipmentSeur/shipments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SeurShipmentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SeurShipmentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation shipmentSeurSeurGetShipment
     *
     * Cancels a shipment
     *
     * @param int $shipment_id The Id of a Shipment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SeurShipmentResponse
     */
    public function shipmentSeurSeurGetShipment($shipment_id)
    {
        list($response) = $this->shipmentSeurSeurGetShipmentWithHttpInfo($shipment_id);
        return $response;
    }

    /**
     * Operation shipmentSeurSeurGetShipmentWithHttpInfo
     *
     * Cancels a shipment
     *
     * @param int $shipment_id The Id of a Shipment (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SeurShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentSeurSeurGetShipmentWithHttpInfo($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shipment_id when calling shipmentSeurSeurGetShipment');
        }
        // parse inputs
        $resourcePath = "/v2.01/ShipmentSeur/shipments/{ShipmentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                "{" . "ShipmentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($shipment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SeurShipmentResponse',
                '/v2.01/ShipmentSeur/shipments/{ShipmentId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SeurShipmentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SeurShipmentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomApiErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
