<?php
/**
 * PayInsAddonPaymentsApi
 * PHP version 5
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MarketPay API
 *
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MarketPay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MarketPay\ApiException;
use MarketPay\Configuration;
use MarketPay\HeaderSelector;
use MarketPay\ObjectSerializer;

/**
 * PayInsAddonPaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayInsAddonPaymentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPayment
     *
     * @param  int $pay_in_id pay_in_id (required)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MarketPay\Model\AddonPaymentsPayInsResponse
     */
    public function payInsAddonPaymentsAddonPaymentsGetPayment($pay_in_id)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsGetPaymentWithHttpInfo($pay_in_id);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPaymentWithHttpInfo
     *
     * @param  int $pay_in_id (required)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MarketPay\Model\AddonPaymentsPayInsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsGetPaymentWithHttpInfo($pay_in_id)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPayInsResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsGetPaymentRequest($pay_in_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\AddonPaymentsPayInsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\CustomApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPaymentAsync
     *
     * 
     *
     * @param  int $pay_in_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsGetPaymentAsync($pay_in_id)
    {
        return $this->payInsAddonPaymentsAddonPaymentsGetPaymentAsyncWithHttpInfo($pay_in_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPaymentAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $pay_in_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsGetPaymentAsyncWithHttpInfo($pay_in_id)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPayInsResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsGetPaymentRequest($pay_in_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payInsAddonPaymentsAddonPaymentsGetPayment'
     *
     * @param  int $pay_in_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payInsAddonPaymentsAddonPaymentsGetPaymentRequest($pay_in_id)
    {
        // verify the required parameter 'pay_in_id' is set
        if ($pay_in_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_in_id when calling payInsAddonPaymentsAddonPaymentsGetPayment'
            );
        }

        $resourcePath = '/v2.01/PayInsAddonPayments/payments/{PayInId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($pay_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PayInId' . '}',
                ObjectSerializer::toPathValue($pay_in_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPreauthorization
     *
     * @param  int $preauthorization_id preauthorization_id (required)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MarketPay\Model\AddonPaymentsPreauthorizeResponse
     */
    public function payInsAddonPaymentsAddonPaymentsGetPreauthorization($preauthorization_id)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsGetPreauthorizationWithHttpInfo($preauthorization_id);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPreauthorizationWithHttpInfo
     *
     * @param  int $preauthorization_id (required)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MarketPay\Model\AddonPaymentsPreauthorizeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsGetPreauthorizationWithHttpInfo($preauthorization_id)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPreauthorizeResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsGetPreauthorizationRequest($preauthorization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\AddonPaymentsPreauthorizeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\CustomApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPreauthorizationAsync
     *
     * 
     *
     * @param  int $preauthorization_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsGetPreauthorizationAsync($preauthorization_id)
    {
        return $this->payInsAddonPaymentsAddonPaymentsGetPreauthorizationAsyncWithHttpInfo($preauthorization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsGetPreauthorizationAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $preauthorization_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsGetPreauthorizationAsyncWithHttpInfo($preauthorization_id)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPreauthorizeResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsGetPreauthorizationRequest($preauthorization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payInsAddonPaymentsAddonPaymentsGetPreauthorization'
     *
     * @param  int $preauthorization_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payInsAddonPaymentsAddonPaymentsGetPreauthorizationRequest($preauthorization_id)
    {
        // verify the required parameter 'preauthorization_id' is set
        if ($preauthorization_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $preauthorization_id when calling payInsAddonPaymentsAddonPaymentsGetPreauthorization'
            );
        }

        $resourcePath = '/v2.01/PayInsAddonPayments/preauthorizations/{PreauthorizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($preauthorization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PreauthorizationId' . '}',
                ObjectSerializer::toPathValue($preauthorization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPaymentByWeb
     *
     * @param  string $x_webhook x_webhook (optional)
     * @param  \MarketPay\Model\AddonPaymentsPayByWebPost $addon_payments_pay_in addon_payments_pay_in (optional)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MarketPay\Model\AddonPaymentsPayByWebResponse
     */
    public function payInsAddonPaymentsAddonPaymentsPostPaymentByWeb($x_webhook = null, $addon_payments_pay_in = null)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsPostPaymentByWebWithHttpInfo($x_webhook, $addon_payments_pay_in);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPaymentByWebWithHttpInfo
     *
     * @param  string $x_webhook (optional)
     * @param  \MarketPay\Model\AddonPaymentsPayByWebPost $addon_payments_pay_in (optional)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MarketPay\Model\AddonPaymentsPayByWebResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsPostPaymentByWebWithHttpInfo($x_webhook = null, $addon_payments_pay_in = null)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPayByWebResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsPostPaymentByWebRequest($x_webhook, $addon_payments_pay_in);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\AddonPaymentsPayByWebResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\CustomApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPaymentByWebAsync
     *
     * 
     *
     * @param  string $x_webhook (optional)
     * @param  \MarketPay\Model\AddonPaymentsPayByWebPost $addon_payments_pay_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsPostPaymentByWebAsync($x_webhook = null, $addon_payments_pay_in = null)
    {
        return $this->payInsAddonPaymentsAddonPaymentsPostPaymentByWebAsyncWithHttpInfo($x_webhook, $addon_payments_pay_in)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPaymentByWebAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_webhook (optional)
     * @param  \MarketPay\Model\AddonPaymentsPayByWebPost $addon_payments_pay_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsPostPaymentByWebAsyncWithHttpInfo($x_webhook = null, $addon_payments_pay_in = null)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPayByWebResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsPostPaymentByWebRequest($x_webhook, $addon_payments_pay_in);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payInsAddonPaymentsAddonPaymentsPostPaymentByWeb'
     *
     * @param  string $x_webhook (optional)
     * @param  \MarketPay\Model\AddonPaymentsPayByWebPost $addon_payments_pay_in (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payInsAddonPaymentsAddonPaymentsPostPaymentByWebRequest($x_webhook = null, $addon_payments_pay_in = null)
    {

        $resourcePath = '/v2.01/PayInsAddonPayments/payments/web';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_webhook !== null) {
            $headerParams['X-Webhook'] = ObjectSerializer::toHeaderValue($x_webhook);
        }


        // body params
        $_tempBody = null;
        if (isset($addon_payments_pay_in)) {
            $_tempBody = $addon_payments_pay_in;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWeb
     *
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizeByWebPost $addon_payments_preauthorization addon_payments_preauthorization (optional)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MarketPay\Model\AddonPaymentsPreauthorizeByWebResponse
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWeb($addon_payments_preauthorization = null)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebWithHttpInfo($addon_payments_preauthorization);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebWithHttpInfo
     *
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizeByWebPost $addon_payments_preauthorization (optional)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MarketPay\Model\AddonPaymentsPreauthorizeByWebResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebWithHttpInfo($addon_payments_preauthorization = null)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPreauthorizeByWebResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebRequest($addon_payments_preauthorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\AddonPaymentsPreauthorizeByWebResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\CustomApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebAsync
     *
     * 
     *
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizeByWebPost $addon_payments_preauthorization (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebAsync($addon_payments_preauthorization = null)
    {
        return $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebAsyncWithHttpInfo($addon_payments_preauthorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebAsyncWithHttpInfo
     *
     * 
     *
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizeByWebPost $addon_payments_preauthorization (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebAsyncWithHttpInfo($addon_payments_preauthorization = null)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPreauthorizeByWebResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebRequest($addon_payments_preauthorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWeb'
     *
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizeByWebPost $addon_payments_preauthorization (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payInsAddonPaymentsAddonPaymentsPostPreauthorizationByWebRequest($addon_payments_preauthorization = null)
    {

        $resourcePath = '/v2.01/PayInsAddonPayments/preauthorizations/web';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($addon_payments_preauthorization)) {
            $_tempBody = $addon_payments_preauthorization;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellation
     *
     * @param  int $preauthorization_id preauthorization_id (required)
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizationCancellationPost $addon_payments_preauthorization_cancellation addon_payments_preauthorization_cancellation (optional)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MarketPay\Model\AddonPaymentsPreauthorizationCancellationResponse
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellation($preauthorization_id, $addon_payments_preauthorization_cancellation = null)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_cancellation);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationWithHttpInfo
     *
     * @param  int $preauthorization_id (required)
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizationCancellationPost $addon_payments_preauthorization_cancellation (optional)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MarketPay\Model\AddonPaymentsPreauthorizationCancellationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_cancellation = null)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPreauthorizationCancellationResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationRequest($preauthorization_id, $addon_payments_preauthorization_cancellation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\AddonPaymentsPreauthorizationCancellationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\CustomApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationAsync
     *
     * 
     *
     * @param  int $preauthorization_id (required)
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizationCancellationPost $addon_payments_preauthorization_cancellation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationAsync($preauthorization_id, $addon_payments_preauthorization_cancellation = null)
    {
        return $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationAsyncWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_cancellation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $preauthorization_id (required)
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizationCancellationPost $addon_payments_preauthorization_cancellation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationAsyncWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_cancellation = null)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPreauthorizationCancellationResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationRequest($preauthorization_id, $addon_payments_preauthorization_cancellation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellation'
     *
     * @param  int $preauthorization_id (required)
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizationCancellationPost $addon_payments_preauthorization_cancellation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellationRequest($preauthorization_id, $addon_payments_preauthorization_cancellation = null)
    {
        // verify the required parameter 'preauthorization_id' is set
        if ($preauthorization_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $preauthorization_id when calling payInsAddonPaymentsAddonPaymentsPostPreauthorizationCancellation'
            );
        }

        $resourcePath = '/v2.01/PayInsAddonPayments/preauthorizations/{PreauthorizationId}/cancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($preauthorization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PreauthorizationId' . '}',
                ObjectSerializer::toPathValue($preauthorization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($addon_payments_preauthorization_cancellation)) {
            $_tempBody = $addon_payments_preauthorization_cancellation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmation
     *
     * @param  int $preauthorization_id preauthorization_id (required)
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizationConfirmationPost $addon_payments_preauthorization_confirmation addon_payments_preauthorization_confirmation (optional)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MarketPay\Model\AddonPaymentsPreauthorizationConfirmationResponse
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmation($preauthorization_id, $addon_payments_preauthorization_confirmation = null)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_confirmation);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationWithHttpInfo
     *
     * @param  int $preauthorization_id (required)
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizationConfirmationPost $addon_payments_preauthorization_confirmation (optional)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MarketPay\Model\AddonPaymentsPreauthorizationConfirmationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_confirmation = null)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPreauthorizationConfirmationResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationRequest($preauthorization_id, $addon_payments_preauthorization_confirmation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\AddonPaymentsPreauthorizationConfirmationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\CustomApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationAsync
     *
     * 
     *
     * @param  int $preauthorization_id (required)
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizationConfirmationPost $addon_payments_preauthorization_confirmation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationAsync($preauthorization_id, $addon_payments_preauthorization_confirmation = null)
    {
        return $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationAsyncWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_confirmation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $preauthorization_id (required)
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizationConfirmationPost $addon_payments_preauthorization_confirmation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationAsyncWithHttpInfo($preauthorization_id, $addon_payments_preauthorization_confirmation = null)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsPreauthorizationConfirmationResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationRequest($preauthorization_id, $addon_payments_preauthorization_confirmation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmation'
     *
     * @param  int $preauthorization_id (required)
     * @param  \MarketPay\Model\AddonPaymentsPreauthorizationConfirmationPost $addon_payments_preauthorization_confirmation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmationRequest($preauthorization_id, $addon_payments_preauthorization_confirmation = null)
    {
        // verify the required parameter 'preauthorization_id' is set
        if ($preauthorization_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $preauthorization_id when calling payInsAddonPaymentsAddonPaymentsPostPreauthorizationConfirmation'
            );
        }

        $resourcePath = '/v2.01/PayInsAddonPayments/preauthorizations/{PreauthorizationId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($preauthorization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PreauthorizationId' . '}',
                ObjectSerializer::toPathValue($preauthorization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($addon_payments_preauthorization_confirmation)) {
            $_tempBody = $addon_payments_preauthorization_confirmation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostRefund
     *
     * @param  int $pay_in_id pay_in_id (required)
     * @param  \MarketPay\Model\AddonPaymentsRefundPost $addon_payments_refund addon_payments_refund (optional)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MarketPay\Model\AddonPaymentsRefundResponse
     */
    public function payInsAddonPaymentsAddonPaymentsPostRefund($pay_in_id, $addon_payments_refund = null)
    {
        list($response) = $this->payInsAddonPaymentsAddonPaymentsPostRefundWithHttpInfo($pay_in_id, $addon_payments_refund);
        return $response;
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostRefundWithHttpInfo
     *
     * @param  int $pay_in_id (required)
     * @param  \MarketPay\Model\AddonPaymentsRefundPost $addon_payments_refund (optional)
     *
     * @throws \MarketPay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MarketPay\Model\AddonPaymentsRefundResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function payInsAddonPaymentsAddonPaymentsPostRefundWithHttpInfo($pay_in_id, $addon_payments_refund = null)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsRefundResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsPostRefundRequest($pay_in_id, $addon_payments_refund);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\AddonPaymentsRefundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MarketPay\Model\CustomApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostRefundAsync
     *
     * 
     *
     * @param  int $pay_in_id (required)
     * @param  \MarketPay\Model\AddonPaymentsRefundPost $addon_payments_refund (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsPostRefundAsync($pay_in_id, $addon_payments_refund = null)
    {
        return $this->payInsAddonPaymentsAddonPaymentsPostRefundAsyncWithHttpInfo($pay_in_id, $addon_payments_refund)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payInsAddonPaymentsAddonPaymentsPostRefundAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $pay_in_id (required)
     * @param  \MarketPay\Model\AddonPaymentsRefundPost $addon_payments_refund (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payInsAddonPaymentsAddonPaymentsPostRefundAsyncWithHttpInfo($pay_in_id, $addon_payments_refund = null)
    {
        $returnType = '\MarketPay\Model\AddonPaymentsRefundResponse';
        $request = $this->payInsAddonPaymentsAddonPaymentsPostRefundRequest($pay_in_id, $addon_payments_refund);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payInsAddonPaymentsAddonPaymentsPostRefund'
     *
     * @param  int $pay_in_id (required)
     * @param  \MarketPay\Model\AddonPaymentsRefundPost $addon_payments_refund (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function payInsAddonPaymentsAddonPaymentsPostRefundRequest($pay_in_id, $addon_payments_refund = null)
    {
        // verify the required parameter 'pay_in_id' is set
        if ($pay_in_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_in_id when calling payInsAddonPaymentsAddonPaymentsPostRefund'
            );
        }

        $resourcePath = '/v2.01/PayInsAddonPayments/payments/{PayInId}/refunds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($pay_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PayInId' . '}',
                ObjectSerializer::toPathValue($pay_in_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($addon_payments_refund)) {
            $_tempBody = $addon_payments_refund;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
