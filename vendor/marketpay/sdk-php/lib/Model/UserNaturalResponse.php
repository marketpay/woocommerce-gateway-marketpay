<?php
/**
 * UserNaturalResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MarketPay API
 *
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MarketPay\Model;

use \ArrayAccess;
use \MarketPay\ObjectSerializer;

/**
 * UserNaturalResponse Class Doc Comment
 *
 * @category Class
 * @package  MarketPay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserNaturalResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserNaturalResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\MarketPay\Model\Address',
        'birthday' => 'int',
        'nationality' => 'string',
        'country_of_residence' => 'string',
        'occupation' => 'string',
        'income_range' => 'int',
        'proof_of_identity' => 'string',
        'proof_of_address' => 'string',
        'person_type' => 'string',
        'kyc_level' => 'string',
        'email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'id' => 'string',
        'creation_date' => 'int',
        'tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'birthday' => 'int64',
        'nationality' => null,
        'country_of_residence' => null,
        'occupation' => null,
        'income_range' => 'int32',
        'proof_of_identity' => null,
        'proof_of_address' => null,
        'person_type' => null,
        'kyc_level' => null,
        'email' => null,
        'first_name' => null,
        'last_name' => null,
        'id' => null,
        'creation_date' => 'int64',
        'tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'Address',
        'birthday' => 'Birthday',
        'nationality' => 'Nationality',
        'country_of_residence' => 'CountryOfResidence',
        'occupation' => 'Occupation',
        'income_range' => 'IncomeRange',
        'proof_of_identity' => 'ProofOfIdentity',
        'proof_of_address' => 'ProofOfAddress',
        'person_type' => 'PersonType',
        'kyc_level' => 'KYCLevel',
        'email' => 'Email',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'id' => 'Id',
        'creation_date' => 'CreationDate',
        'tag' => 'Tag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'birthday' => 'setBirthday',
        'nationality' => 'setNationality',
        'country_of_residence' => 'setCountryOfResidence',
        'occupation' => 'setOccupation',
        'income_range' => 'setIncomeRange',
        'proof_of_identity' => 'setProofOfIdentity',
        'proof_of_address' => 'setProofOfAddress',
        'person_type' => 'setPersonType',
        'kyc_level' => 'setKycLevel',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'id' => 'setId',
        'creation_date' => 'setCreationDate',
        'tag' => 'setTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'birthday' => 'getBirthday',
        'nationality' => 'getNationality',
        'country_of_residence' => 'getCountryOfResidence',
        'occupation' => 'getOccupation',
        'income_range' => 'getIncomeRange',
        'proof_of_identity' => 'getProofOfIdentity',
        'proof_of_address' => 'getProofOfAddress',
        'person_type' => 'getPersonType',
        'kyc_level' => 'getKycLevel',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'id' => 'getId',
        'creation_date' => 'getCreationDate',
        'tag' => 'getTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NATIONALITY_NOT_SPECIFIED = 'NotSpecified';
    const NATIONALITY_AD = 'AD';
    const NATIONALITY_AE = 'AE';
    const NATIONALITY_AF = 'AF';
    const NATIONALITY_AG = 'AG';
    const NATIONALITY_AI = 'AI';
    const NATIONALITY_AL = 'AL';
    const NATIONALITY_AM = 'AM';
    const NATIONALITY_AO = 'AO';
    const NATIONALITY_AQ = 'AQ';
    const NATIONALITY_AR = 'AR';
    const NATIONALITY__AS = 'AS';
    const NATIONALITY_AT = 'AT';
    const NATIONALITY_AU = 'AU';
    const NATIONALITY_AW = 'AW';
    const NATIONALITY_AX = 'AX';
    const NATIONALITY_AZ = 'AZ';
    const NATIONALITY_BA = 'BA';
    const NATIONALITY_BB = 'BB';
    const NATIONALITY_BD = 'BD';
    const NATIONALITY_BE = 'BE';
    const NATIONALITY_BF = 'BF';
    const NATIONALITY_BG = 'BG';
    const NATIONALITY_BH = 'BH';
    const NATIONALITY_BI = 'BI';
    const NATIONALITY_BJ = 'BJ';
    const NATIONALITY_BL = 'BL';
    const NATIONALITY_BM = 'BM';
    const NATIONALITY_BN = 'BN';
    const NATIONALITY_BO = 'BO';
    const NATIONALITY_BQ = 'BQ';
    const NATIONALITY_BR = 'BR';
    const NATIONALITY_BS = 'BS';
    const NATIONALITY_BT = 'BT';
    const NATIONALITY_BV = 'BV';
    const NATIONALITY_BW = 'BW';
    const NATIONALITY_BY = 'BY';
    const NATIONALITY_BZ = 'BZ';
    const NATIONALITY_CA = 'CA';
    const NATIONALITY_CC = 'CC';
    const NATIONALITY_CD = 'CD';
    const NATIONALITY_CF = 'CF';
    const NATIONALITY_CG = 'CG';
    const NATIONALITY_CH = 'CH';
    const NATIONALITY_CI = 'CI';
    const NATIONALITY_CK = 'CK';
    const NATIONALITY_CL = 'CL';
    const NATIONALITY_CM = 'CM';
    const NATIONALITY_CN = 'CN';
    const NATIONALITY_CO = 'CO';
    const NATIONALITY_CR = 'CR';
    const NATIONALITY_CU = 'CU';
    const NATIONALITY_CV = 'CV';
    const NATIONALITY_CW = 'CW';
    const NATIONALITY_CX = 'CX';
    const NATIONALITY_CY = 'CY';
    const NATIONALITY_CZ = 'CZ';
    const NATIONALITY_DE = 'DE';
    const NATIONALITY_DJ = 'DJ';
    const NATIONALITY_DK = 'DK';
    const NATIONALITY_DM = 'DM';
    const NATIONALITY__DO = 'DO';
    const NATIONALITY_DZ = 'DZ';
    const NATIONALITY_EC = 'EC';
    const NATIONALITY_EE = 'EE';
    const NATIONALITY_EG = 'EG';
    const NATIONALITY_EH = 'EH';
    const NATIONALITY_ER = 'ER';
    const NATIONALITY_ES = 'ES';
    const NATIONALITY_ET = 'ET';
    const NATIONALITY_FI = 'FI';
    const NATIONALITY_FJ = 'FJ';
    const NATIONALITY_FK = 'FK';
    const NATIONALITY_FM = 'FM';
    const NATIONALITY_FO = 'FO';
    const NATIONALITY_FR = 'FR';
    const NATIONALITY_GA = 'GA';
    const NATIONALITY_GB = 'GB';
    const NATIONALITY_GD = 'GD';
    const NATIONALITY_GE = 'GE';
    const NATIONALITY_GF = 'GF';
    const NATIONALITY_GG = 'GG';
    const NATIONALITY_GH = 'GH';
    const NATIONALITY_GI = 'GI';
    const NATIONALITY_GL = 'GL';
    const NATIONALITY_GM = 'GM';
    const NATIONALITY_GN = 'GN';
    const NATIONALITY_GP = 'GP';
    const NATIONALITY_GQ = 'GQ';
    const NATIONALITY_GR = 'GR';
    const NATIONALITY_GS = 'GS';
    const NATIONALITY_GT = 'GT';
    const NATIONALITY_GU = 'GU';
    const NATIONALITY_GW = 'GW';
    const NATIONALITY_GY = 'GY';
    const NATIONALITY_HK = 'HK';
    const NATIONALITY_HM = 'HM';
    const NATIONALITY_HN = 'HN';
    const NATIONALITY_HR = 'HR';
    const NATIONALITY_HT = 'HT';
    const NATIONALITY_HU = 'HU';
    const NATIONALITY_ID = 'ID';
    const NATIONALITY_IE = 'IE';
    const NATIONALITY_IL = 'IL';
    const NATIONALITY_IM = 'IM';
    const NATIONALITY_IN = 'IN';
    const NATIONALITY_IO = 'IO';
    const NATIONALITY_IQ = 'IQ';
    const NATIONALITY_IR = 'IR';
    const NATIONALITY_IS = 'IS';
    const NATIONALITY_IT = 'IT';
    const NATIONALITY_JE = 'JE';
    const NATIONALITY_JM = 'JM';
    const NATIONALITY_JO = 'JO';
    const NATIONALITY_JP = 'JP';
    const NATIONALITY_KE = 'KE';
    const NATIONALITY_KG = 'KG';
    const NATIONALITY_KH = 'KH';
    const NATIONALITY_KI = 'KI';
    const NATIONALITY_KM = 'KM';
    const NATIONALITY_KN = 'KN';
    const NATIONALITY_KP = 'KP';
    const NATIONALITY_KR = 'KR';
    const NATIONALITY_KW = 'KW';
    const NATIONALITY_KY = 'KY';
    const NATIONALITY_KZ = 'KZ';
    const NATIONALITY_LA = 'LA';
    const NATIONALITY_LB = 'LB';
    const NATIONALITY_LC = 'LC';
    const NATIONALITY_LI = 'LI';
    const NATIONALITY_LK = 'LK';
    const NATIONALITY_LR = 'LR';
    const NATIONALITY_LS = 'LS';
    const NATIONALITY_LT = 'LT';
    const NATIONALITY_LU = 'LU';
    const NATIONALITY_LV = 'LV';
    const NATIONALITY_LY = 'LY';
    const NATIONALITY_MA = 'MA';
    const NATIONALITY_MC = 'MC';
    const NATIONALITY_MD = 'MD';
    const NATIONALITY_ME = 'ME';
    const NATIONALITY_MF = 'MF';
    const NATIONALITY_MG = 'MG';
    const NATIONALITY_MH = 'MH';
    const NATIONALITY_MK = 'MK';
    const NATIONALITY_ML = 'ML';
    const NATIONALITY_MM = 'MM';
    const NATIONALITY_MN = 'MN';
    const NATIONALITY_MO = 'MO';
    const NATIONALITY_MP = 'MP';
    const NATIONALITY_MQ = 'MQ';
    const NATIONALITY_MR = 'MR';
    const NATIONALITY_MS = 'MS';
    const NATIONALITY_MT = 'MT';
    const NATIONALITY_MU = 'MU';
    const NATIONALITY_MV = 'MV';
    const NATIONALITY_MW = 'MW';
    const NATIONALITY_MX = 'MX';
    const NATIONALITY_MY = 'MY';
    const NATIONALITY_MZ = 'MZ';
    const NATIONALITY_NA = 'NA';
    const NATIONALITY_NC = 'NC';
    const NATIONALITY_NE = 'NE';
    const NATIONALITY_NF = 'NF';
    const NATIONALITY_NG = 'NG';
    const NATIONALITY_NI = 'NI';
    const NATIONALITY_NL = 'NL';
    const NATIONALITY_NO = 'NO';
    const NATIONALITY_NP = 'NP';
    const NATIONALITY_NR = 'NR';
    const NATIONALITY_NU = 'NU';
    const NATIONALITY_NZ = 'NZ';
    const NATIONALITY_OM = 'OM';
    const NATIONALITY_PA = 'PA';
    const NATIONALITY_PE = 'PE';
    const NATIONALITY_PF = 'PF';
    const NATIONALITY_PG = 'PG';
    const NATIONALITY_PH = 'PH';
    const NATIONALITY_PK = 'PK';
    const NATIONALITY_PL = 'PL';
    const NATIONALITY_PM = 'PM';
    const NATIONALITY_PN = 'PN';
    const NATIONALITY_PR = 'PR';
    const NATIONALITY_PS = 'PS';
    const NATIONALITY_PT = 'PT';
    const NATIONALITY_PW = 'PW';
    const NATIONALITY_PY = 'PY';
    const NATIONALITY_QA = 'QA';
    const NATIONALITY_RE = 'RE';
    const NATIONALITY_RO = 'RO';
    const NATIONALITY_RS = 'RS';
    const NATIONALITY_RU = 'RU';
    const NATIONALITY_RW = 'RW';
    const NATIONALITY_SA = 'SA';
    const NATIONALITY_SB = 'SB';
    const NATIONALITY_SC = 'SC';
    const NATIONALITY_SD = 'SD';
    const NATIONALITY_SE = 'SE';
    const NATIONALITY_SG = 'SG';
    const NATIONALITY_SH = 'SH';
    const NATIONALITY_SI = 'SI';
    const NATIONALITY_SJ = 'SJ';
    const NATIONALITY_SK = 'SK';
    const NATIONALITY_SL = 'SL';
    const NATIONALITY_SM = 'SM';
    const NATIONALITY_SN = 'SN';
    const NATIONALITY_SO = 'SO';
    const NATIONALITY_SR = 'SR';
    const NATIONALITY_SS = 'SS';
    const NATIONALITY_ST = 'ST';
    const NATIONALITY_SV = 'SV';
    const NATIONALITY_SX = 'SX';
    const NATIONALITY_SY = 'SY';
    const NATIONALITY_SZ = 'SZ';
    const NATIONALITY_TC = 'TC';
    const NATIONALITY_TD = 'TD';
    const NATIONALITY_TF = 'TF';
    const NATIONALITY_TG = 'TG';
    const NATIONALITY_TH = 'TH';
    const NATIONALITY_TJ = 'TJ';
    const NATIONALITY_TK = 'TK';
    const NATIONALITY_TL = 'TL';
    const NATIONALITY_TM = 'TM';
    const NATIONALITY_TN = 'TN';
    const NATIONALITY_TO = 'TO';
    const NATIONALITY_TR = 'TR';
    const NATIONALITY_TT = 'TT';
    const NATIONALITY_TV = 'TV';
    const NATIONALITY_TW = 'TW';
    const NATIONALITY_TZ = 'TZ';
    const NATIONALITY_UA = 'UA';
    const NATIONALITY_UG = 'UG';
    const NATIONALITY_UM = 'UM';
    const NATIONALITY_US = 'US';
    const NATIONALITY_UY = 'UY';
    const NATIONALITY_UZ = 'UZ';
    const NATIONALITY_VA = 'VA';
    const NATIONALITY_VC = 'VC';
    const NATIONALITY_VE = 'VE';
    const NATIONALITY_VG = 'VG';
    const NATIONALITY_VI = 'VI';
    const NATIONALITY_VN = 'VN';
    const NATIONALITY_VU = 'VU';
    const NATIONALITY_WF = 'WF';
    const NATIONALITY_WS = 'WS';
    const NATIONALITY_YE = 'YE';
    const NATIONALITY_YT = 'YT';
    const NATIONALITY_ZA = 'ZA';
    const NATIONALITY_ZM = 'ZM';
    const NATIONALITY_ZW = 'ZW';
    const COUNTRY_OF_RESIDENCE_NOT_SPECIFIED = 'NotSpecified';
    const COUNTRY_OF_RESIDENCE_AD = 'AD';
    const COUNTRY_OF_RESIDENCE_AE = 'AE';
    const COUNTRY_OF_RESIDENCE_AF = 'AF';
    const COUNTRY_OF_RESIDENCE_AG = 'AG';
    const COUNTRY_OF_RESIDENCE_AI = 'AI';
    const COUNTRY_OF_RESIDENCE_AL = 'AL';
    const COUNTRY_OF_RESIDENCE_AM = 'AM';
    const COUNTRY_OF_RESIDENCE_AO = 'AO';
    const COUNTRY_OF_RESIDENCE_AQ = 'AQ';
    const COUNTRY_OF_RESIDENCE_AR = 'AR';
    const COUNTRY_OF_RESIDENCE__AS = 'AS';
    const COUNTRY_OF_RESIDENCE_AT = 'AT';
    const COUNTRY_OF_RESIDENCE_AU = 'AU';
    const COUNTRY_OF_RESIDENCE_AW = 'AW';
    const COUNTRY_OF_RESIDENCE_AX = 'AX';
    const COUNTRY_OF_RESIDENCE_AZ = 'AZ';
    const COUNTRY_OF_RESIDENCE_BA = 'BA';
    const COUNTRY_OF_RESIDENCE_BB = 'BB';
    const COUNTRY_OF_RESIDENCE_BD = 'BD';
    const COUNTRY_OF_RESIDENCE_BE = 'BE';
    const COUNTRY_OF_RESIDENCE_BF = 'BF';
    const COUNTRY_OF_RESIDENCE_BG = 'BG';
    const COUNTRY_OF_RESIDENCE_BH = 'BH';
    const COUNTRY_OF_RESIDENCE_BI = 'BI';
    const COUNTRY_OF_RESIDENCE_BJ = 'BJ';
    const COUNTRY_OF_RESIDENCE_BL = 'BL';
    const COUNTRY_OF_RESIDENCE_BM = 'BM';
    const COUNTRY_OF_RESIDENCE_BN = 'BN';
    const COUNTRY_OF_RESIDENCE_BO = 'BO';
    const COUNTRY_OF_RESIDENCE_BQ = 'BQ';
    const COUNTRY_OF_RESIDENCE_BR = 'BR';
    const COUNTRY_OF_RESIDENCE_BS = 'BS';
    const COUNTRY_OF_RESIDENCE_BT = 'BT';
    const COUNTRY_OF_RESIDENCE_BV = 'BV';
    const COUNTRY_OF_RESIDENCE_BW = 'BW';
    const COUNTRY_OF_RESIDENCE_BY = 'BY';
    const COUNTRY_OF_RESIDENCE_BZ = 'BZ';
    const COUNTRY_OF_RESIDENCE_CA = 'CA';
    const COUNTRY_OF_RESIDENCE_CC = 'CC';
    const COUNTRY_OF_RESIDENCE_CD = 'CD';
    const COUNTRY_OF_RESIDENCE_CF = 'CF';
    const COUNTRY_OF_RESIDENCE_CG = 'CG';
    const COUNTRY_OF_RESIDENCE_CH = 'CH';
    const COUNTRY_OF_RESIDENCE_CI = 'CI';
    const COUNTRY_OF_RESIDENCE_CK = 'CK';
    const COUNTRY_OF_RESIDENCE_CL = 'CL';
    const COUNTRY_OF_RESIDENCE_CM = 'CM';
    const COUNTRY_OF_RESIDENCE_CN = 'CN';
    const COUNTRY_OF_RESIDENCE_CO = 'CO';
    const COUNTRY_OF_RESIDENCE_CR = 'CR';
    const COUNTRY_OF_RESIDENCE_CU = 'CU';
    const COUNTRY_OF_RESIDENCE_CV = 'CV';
    const COUNTRY_OF_RESIDENCE_CW = 'CW';
    const COUNTRY_OF_RESIDENCE_CX = 'CX';
    const COUNTRY_OF_RESIDENCE_CY = 'CY';
    const COUNTRY_OF_RESIDENCE_CZ = 'CZ';
    const COUNTRY_OF_RESIDENCE_DE = 'DE';
    const COUNTRY_OF_RESIDENCE_DJ = 'DJ';
    const COUNTRY_OF_RESIDENCE_DK = 'DK';
    const COUNTRY_OF_RESIDENCE_DM = 'DM';
    const COUNTRY_OF_RESIDENCE__DO = 'DO';
    const COUNTRY_OF_RESIDENCE_DZ = 'DZ';
    const COUNTRY_OF_RESIDENCE_EC = 'EC';
    const COUNTRY_OF_RESIDENCE_EE = 'EE';
    const COUNTRY_OF_RESIDENCE_EG = 'EG';
    const COUNTRY_OF_RESIDENCE_EH = 'EH';
    const COUNTRY_OF_RESIDENCE_ER = 'ER';
    const COUNTRY_OF_RESIDENCE_ES = 'ES';
    const COUNTRY_OF_RESIDENCE_ET = 'ET';
    const COUNTRY_OF_RESIDENCE_FI = 'FI';
    const COUNTRY_OF_RESIDENCE_FJ = 'FJ';
    const COUNTRY_OF_RESIDENCE_FK = 'FK';
    const COUNTRY_OF_RESIDENCE_FM = 'FM';
    const COUNTRY_OF_RESIDENCE_FO = 'FO';
    const COUNTRY_OF_RESIDENCE_FR = 'FR';
    const COUNTRY_OF_RESIDENCE_GA = 'GA';
    const COUNTRY_OF_RESIDENCE_GB = 'GB';
    const COUNTRY_OF_RESIDENCE_GD = 'GD';
    const COUNTRY_OF_RESIDENCE_GE = 'GE';
    const COUNTRY_OF_RESIDENCE_GF = 'GF';
    const COUNTRY_OF_RESIDENCE_GG = 'GG';
    const COUNTRY_OF_RESIDENCE_GH = 'GH';
    const COUNTRY_OF_RESIDENCE_GI = 'GI';
    const COUNTRY_OF_RESIDENCE_GL = 'GL';
    const COUNTRY_OF_RESIDENCE_GM = 'GM';
    const COUNTRY_OF_RESIDENCE_GN = 'GN';
    const COUNTRY_OF_RESIDENCE_GP = 'GP';
    const COUNTRY_OF_RESIDENCE_GQ = 'GQ';
    const COUNTRY_OF_RESIDENCE_GR = 'GR';
    const COUNTRY_OF_RESIDENCE_GS = 'GS';
    const COUNTRY_OF_RESIDENCE_GT = 'GT';
    const COUNTRY_OF_RESIDENCE_GU = 'GU';
    const COUNTRY_OF_RESIDENCE_GW = 'GW';
    const COUNTRY_OF_RESIDENCE_GY = 'GY';
    const COUNTRY_OF_RESIDENCE_HK = 'HK';
    const COUNTRY_OF_RESIDENCE_HM = 'HM';
    const COUNTRY_OF_RESIDENCE_HN = 'HN';
    const COUNTRY_OF_RESIDENCE_HR = 'HR';
    const COUNTRY_OF_RESIDENCE_HT = 'HT';
    const COUNTRY_OF_RESIDENCE_HU = 'HU';
    const COUNTRY_OF_RESIDENCE_ID = 'ID';
    const COUNTRY_OF_RESIDENCE_IE = 'IE';
    const COUNTRY_OF_RESIDENCE_IL = 'IL';
    const COUNTRY_OF_RESIDENCE_IM = 'IM';
    const COUNTRY_OF_RESIDENCE_IN = 'IN';
    const COUNTRY_OF_RESIDENCE_IO = 'IO';
    const COUNTRY_OF_RESIDENCE_IQ = 'IQ';
    const COUNTRY_OF_RESIDENCE_IR = 'IR';
    const COUNTRY_OF_RESIDENCE_IS = 'IS';
    const COUNTRY_OF_RESIDENCE_IT = 'IT';
    const COUNTRY_OF_RESIDENCE_JE = 'JE';
    const COUNTRY_OF_RESIDENCE_JM = 'JM';
    const COUNTRY_OF_RESIDENCE_JO = 'JO';
    const COUNTRY_OF_RESIDENCE_JP = 'JP';
    const COUNTRY_OF_RESIDENCE_KE = 'KE';
    const COUNTRY_OF_RESIDENCE_KG = 'KG';
    const COUNTRY_OF_RESIDENCE_KH = 'KH';
    const COUNTRY_OF_RESIDENCE_KI = 'KI';
    const COUNTRY_OF_RESIDENCE_KM = 'KM';
    const COUNTRY_OF_RESIDENCE_KN = 'KN';
    const COUNTRY_OF_RESIDENCE_KP = 'KP';
    const COUNTRY_OF_RESIDENCE_KR = 'KR';
    const COUNTRY_OF_RESIDENCE_KW = 'KW';
    const COUNTRY_OF_RESIDENCE_KY = 'KY';
    const COUNTRY_OF_RESIDENCE_KZ = 'KZ';
    const COUNTRY_OF_RESIDENCE_LA = 'LA';
    const COUNTRY_OF_RESIDENCE_LB = 'LB';
    const COUNTRY_OF_RESIDENCE_LC = 'LC';
    const COUNTRY_OF_RESIDENCE_LI = 'LI';
    const COUNTRY_OF_RESIDENCE_LK = 'LK';
    const COUNTRY_OF_RESIDENCE_LR = 'LR';
    const COUNTRY_OF_RESIDENCE_LS = 'LS';
    const COUNTRY_OF_RESIDENCE_LT = 'LT';
    const COUNTRY_OF_RESIDENCE_LU = 'LU';
    const COUNTRY_OF_RESIDENCE_LV = 'LV';
    const COUNTRY_OF_RESIDENCE_LY = 'LY';
    const COUNTRY_OF_RESIDENCE_MA = 'MA';
    const COUNTRY_OF_RESIDENCE_MC = 'MC';
    const COUNTRY_OF_RESIDENCE_MD = 'MD';
    const COUNTRY_OF_RESIDENCE_ME = 'ME';
    const COUNTRY_OF_RESIDENCE_MF = 'MF';
    const COUNTRY_OF_RESIDENCE_MG = 'MG';
    const COUNTRY_OF_RESIDENCE_MH = 'MH';
    const COUNTRY_OF_RESIDENCE_MK = 'MK';
    const COUNTRY_OF_RESIDENCE_ML = 'ML';
    const COUNTRY_OF_RESIDENCE_MM = 'MM';
    const COUNTRY_OF_RESIDENCE_MN = 'MN';
    const COUNTRY_OF_RESIDENCE_MO = 'MO';
    const COUNTRY_OF_RESIDENCE_MP = 'MP';
    const COUNTRY_OF_RESIDENCE_MQ = 'MQ';
    const COUNTRY_OF_RESIDENCE_MR = 'MR';
    const COUNTRY_OF_RESIDENCE_MS = 'MS';
    const COUNTRY_OF_RESIDENCE_MT = 'MT';
    const COUNTRY_OF_RESIDENCE_MU = 'MU';
    const COUNTRY_OF_RESIDENCE_MV = 'MV';
    const COUNTRY_OF_RESIDENCE_MW = 'MW';
    const COUNTRY_OF_RESIDENCE_MX = 'MX';
    const COUNTRY_OF_RESIDENCE_MY = 'MY';
    const COUNTRY_OF_RESIDENCE_MZ = 'MZ';
    const COUNTRY_OF_RESIDENCE_NA = 'NA';
    const COUNTRY_OF_RESIDENCE_NC = 'NC';
    const COUNTRY_OF_RESIDENCE_NE = 'NE';
    const COUNTRY_OF_RESIDENCE_NF = 'NF';
    const COUNTRY_OF_RESIDENCE_NG = 'NG';
    const COUNTRY_OF_RESIDENCE_NI = 'NI';
    const COUNTRY_OF_RESIDENCE_NL = 'NL';
    const COUNTRY_OF_RESIDENCE_NO = 'NO';
    const COUNTRY_OF_RESIDENCE_NP = 'NP';
    const COUNTRY_OF_RESIDENCE_NR = 'NR';
    const COUNTRY_OF_RESIDENCE_NU = 'NU';
    const COUNTRY_OF_RESIDENCE_NZ = 'NZ';
    const COUNTRY_OF_RESIDENCE_OM = 'OM';
    const COUNTRY_OF_RESIDENCE_PA = 'PA';
    const COUNTRY_OF_RESIDENCE_PE = 'PE';
    const COUNTRY_OF_RESIDENCE_PF = 'PF';
    const COUNTRY_OF_RESIDENCE_PG = 'PG';
    const COUNTRY_OF_RESIDENCE_PH = 'PH';
    const COUNTRY_OF_RESIDENCE_PK = 'PK';
    const COUNTRY_OF_RESIDENCE_PL = 'PL';
    const COUNTRY_OF_RESIDENCE_PM = 'PM';
    const COUNTRY_OF_RESIDENCE_PN = 'PN';
    const COUNTRY_OF_RESIDENCE_PR = 'PR';
    const COUNTRY_OF_RESIDENCE_PS = 'PS';
    const COUNTRY_OF_RESIDENCE_PT = 'PT';
    const COUNTRY_OF_RESIDENCE_PW = 'PW';
    const COUNTRY_OF_RESIDENCE_PY = 'PY';
    const COUNTRY_OF_RESIDENCE_QA = 'QA';
    const COUNTRY_OF_RESIDENCE_RE = 'RE';
    const COUNTRY_OF_RESIDENCE_RO = 'RO';
    const COUNTRY_OF_RESIDENCE_RS = 'RS';
    const COUNTRY_OF_RESIDENCE_RU = 'RU';
    const COUNTRY_OF_RESIDENCE_RW = 'RW';
    const COUNTRY_OF_RESIDENCE_SA = 'SA';
    const COUNTRY_OF_RESIDENCE_SB = 'SB';
    const COUNTRY_OF_RESIDENCE_SC = 'SC';
    const COUNTRY_OF_RESIDENCE_SD = 'SD';
    const COUNTRY_OF_RESIDENCE_SE = 'SE';
    const COUNTRY_OF_RESIDENCE_SG = 'SG';
    const COUNTRY_OF_RESIDENCE_SH = 'SH';
    const COUNTRY_OF_RESIDENCE_SI = 'SI';
    const COUNTRY_OF_RESIDENCE_SJ = 'SJ';
    const COUNTRY_OF_RESIDENCE_SK = 'SK';
    const COUNTRY_OF_RESIDENCE_SL = 'SL';
    const COUNTRY_OF_RESIDENCE_SM = 'SM';
    const COUNTRY_OF_RESIDENCE_SN = 'SN';
    const COUNTRY_OF_RESIDENCE_SO = 'SO';
    const COUNTRY_OF_RESIDENCE_SR = 'SR';
    const COUNTRY_OF_RESIDENCE_SS = 'SS';
    const COUNTRY_OF_RESIDENCE_ST = 'ST';
    const COUNTRY_OF_RESIDENCE_SV = 'SV';
    const COUNTRY_OF_RESIDENCE_SX = 'SX';
    const COUNTRY_OF_RESIDENCE_SY = 'SY';
    const COUNTRY_OF_RESIDENCE_SZ = 'SZ';
    const COUNTRY_OF_RESIDENCE_TC = 'TC';
    const COUNTRY_OF_RESIDENCE_TD = 'TD';
    const COUNTRY_OF_RESIDENCE_TF = 'TF';
    const COUNTRY_OF_RESIDENCE_TG = 'TG';
    const COUNTRY_OF_RESIDENCE_TH = 'TH';
    const COUNTRY_OF_RESIDENCE_TJ = 'TJ';
    const COUNTRY_OF_RESIDENCE_TK = 'TK';
    const COUNTRY_OF_RESIDENCE_TL = 'TL';
    const COUNTRY_OF_RESIDENCE_TM = 'TM';
    const COUNTRY_OF_RESIDENCE_TN = 'TN';
    const COUNTRY_OF_RESIDENCE_TO = 'TO';
    const COUNTRY_OF_RESIDENCE_TR = 'TR';
    const COUNTRY_OF_RESIDENCE_TT = 'TT';
    const COUNTRY_OF_RESIDENCE_TV = 'TV';
    const COUNTRY_OF_RESIDENCE_TW = 'TW';
    const COUNTRY_OF_RESIDENCE_TZ = 'TZ';
    const COUNTRY_OF_RESIDENCE_UA = 'UA';
    const COUNTRY_OF_RESIDENCE_UG = 'UG';
    const COUNTRY_OF_RESIDENCE_UM = 'UM';
    const COUNTRY_OF_RESIDENCE_US = 'US';
    const COUNTRY_OF_RESIDENCE_UY = 'UY';
    const COUNTRY_OF_RESIDENCE_UZ = 'UZ';
    const COUNTRY_OF_RESIDENCE_VA = 'VA';
    const COUNTRY_OF_RESIDENCE_VC = 'VC';
    const COUNTRY_OF_RESIDENCE_VE = 'VE';
    const COUNTRY_OF_RESIDENCE_VG = 'VG';
    const COUNTRY_OF_RESIDENCE_VI = 'VI';
    const COUNTRY_OF_RESIDENCE_VN = 'VN';
    const COUNTRY_OF_RESIDENCE_VU = 'VU';
    const COUNTRY_OF_RESIDENCE_WF = 'WF';
    const COUNTRY_OF_RESIDENCE_WS = 'WS';
    const COUNTRY_OF_RESIDENCE_YE = 'YE';
    const COUNTRY_OF_RESIDENCE_YT = 'YT';
    const COUNTRY_OF_RESIDENCE_ZA = 'ZA';
    const COUNTRY_OF_RESIDENCE_ZM = 'ZM';
    const COUNTRY_OF_RESIDENCE_ZW = 'ZW';
    const PERSON_TYPE_NATURAL = 'Natural';
    const PERSON_TYPE_LEGAL = 'Legal';
    const PERSON_TYPE_FEES = 'Fees';
    const KYC_LEVEL_NOT_SPECIFIED = 'NotSpecified';
    const KYC_LEVEL_LIGHT = 'LIGHT';
    const KYC_LEVEL_REGULAR = 'REGULAR';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNationalityAllowableValues()
    {
        return [
            self::NATIONALITY_NOT_SPECIFIED,
            self::NATIONALITY_AD,
            self::NATIONALITY_AE,
            self::NATIONALITY_AF,
            self::NATIONALITY_AG,
            self::NATIONALITY_AI,
            self::NATIONALITY_AL,
            self::NATIONALITY_AM,
            self::NATIONALITY_AO,
            self::NATIONALITY_AQ,
            self::NATIONALITY_AR,
            self::NATIONALITY__AS,
            self::NATIONALITY_AT,
            self::NATIONALITY_AU,
            self::NATIONALITY_AW,
            self::NATIONALITY_AX,
            self::NATIONALITY_AZ,
            self::NATIONALITY_BA,
            self::NATIONALITY_BB,
            self::NATIONALITY_BD,
            self::NATIONALITY_BE,
            self::NATIONALITY_BF,
            self::NATIONALITY_BG,
            self::NATIONALITY_BH,
            self::NATIONALITY_BI,
            self::NATIONALITY_BJ,
            self::NATIONALITY_BL,
            self::NATIONALITY_BM,
            self::NATIONALITY_BN,
            self::NATIONALITY_BO,
            self::NATIONALITY_BQ,
            self::NATIONALITY_BR,
            self::NATIONALITY_BS,
            self::NATIONALITY_BT,
            self::NATIONALITY_BV,
            self::NATIONALITY_BW,
            self::NATIONALITY_BY,
            self::NATIONALITY_BZ,
            self::NATIONALITY_CA,
            self::NATIONALITY_CC,
            self::NATIONALITY_CD,
            self::NATIONALITY_CF,
            self::NATIONALITY_CG,
            self::NATIONALITY_CH,
            self::NATIONALITY_CI,
            self::NATIONALITY_CK,
            self::NATIONALITY_CL,
            self::NATIONALITY_CM,
            self::NATIONALITY_CN,
            self::NATIONALITY_CO,
            self::NATIONALITY_CR,
            self::NATIONALITY_CU,
            self::NATIONALITY_CV,
            self::NATIONALITY_CW,
            self::NATIONALITY_CX,
            self::NATIONALITY_CY,
            self::NATIONALITY_CZ,
            self::NATIONALITY_DE,
            self::NATIONALITY_DJ,
            self::NATIONALITY_DK,
            self::NATIONALITY_DM,
            self::NATIONALITY__DO,
            self::NATIONALITY_DZ,
            self::NATIONALITY_EC,
            self::NATIONALITY_EE,
            self::NATIONALITY_EG,
            self::NATIONALITY_EH,
            self::NATIONALITY_ER,
            self::NATIONALITY_ES,
            self::NATIONALITY_ET,
            self::NATIONALITY_FI,
            self::NATIONALITY_FJ,
            self::NATIONALITY_FK,
            self::NATIONALITY_FM,
            self::NATIONALITY_FO,
            self::NATIONALITY_FR,
            self::NATIONALITY_GA,
            self::NATIONALITY_GB,
            self::NATIONALITY_GD,
            self::NATIONALITY_GE,
            self::NATIONALITY_GF,
            self::NATIONALITY_GG,
            self::NATIONALITY_GH,
            self::NATIONALITY_GI,
            self::NATIONALITY_GL,
            self::NATIONALITY_GM,
            self::NATIONALITY_GN,
            self::NATIONALITY_GP,
            self::NATIONALITY_GQ,
            self::NATIONALITY_GR,
            self::NATIONALITY_GS,
            self::NATIONALITY_GT,
            self::NATIONALITY_GU,
            self::NATIONALITY_GW,
            self::NATIONALITY_GY,
            self::NATIONALITY_HK,
            self::NATIONALITY_HM,
            self::NATIONALITY_HN,
            self::NATIONALITY_HR,
            self::NATIONALITY_HT,
            self::NATIONALITY_HU,
            self::NATIONALITY_ID,
            self::NATIONALITY_IE,
            self::NATIONALITY_IL,
            self::NATIONALITY_IM,
            self::NATIONALITY_IN,
            self::NATIONALITY_IO,
            self::NATIONALITY_IQ,
            self::NATIONALITY_IR,
            self::NATIONALITY_IS,
            self::NATIONALITY_IT,
            self::NATIONALITY_JE,
            self::NATIONALITY_JM,
            self::NATIONALITY_JO,
            self::NATIONALITY_JP,
            self::NATIONALITY_KE,
            self::NATIONALITY_KG,
            self::NATIONALITY_KH,
            self::NATIONALITY_KI,
            self::NATIONALITY_KM,
            self::NATIONALITY_KN,
            self::NATIONALITY_KP,
            self::NATIONALITY_KR,
            self::NATIONALITY_KW,
            self::NATIONALITY_KY,
            self::NATIONALITY_KZ,
            self::NATIONALITY_LA,
            self::NATIONALITY_LB,
            self::NATIONALITY_LC,
            self::NATIONALITY_LI,
            self::NATIONALITY_LK,
            self::NATIONALITY_LR,
            self::NATIONALITY_LS,
            self::NATIONALITY_LT,
            self::NATIONALITY_LU,
            self::NATIONALITY_LV,
            self::NATIONALITY_LY,
            self::NATIONALITY_MA,
            self::NATIONALITY_MC,
            self::NATIONALITY_MD,
            self::NATIONALITY_ME,
            self::NATIONALITY_MF,
            self::NATIONALITY_MG,
            self::NATIONALITY_MH,
            self::NATIONALITY_MK,
            self::NATIONALITY_ML,
            self::NATIONALITY_MM,
            self::NATIONALITY_MN,
            self::NATIONALITY_MO,
            self::NATIONALITY_MP,
            self::NATIONALITY_MQ,
            self::NATIONALITY_MR,
            self::NATIONALITY_MS,
            self::NATIONALITY_MT,
            self::NATIONALITY_MU,
            self::NATIONALITY_MV,
            self::NATIONALITY_MW,
            self::NATIONALITY_MX,
            self::NATIONALITY_MY,
            self::NATIONALITY_MZ,
            self::NATIONALITY_NA,
            self::NATIONALITY_NC,
            self::NATIONALITY_NE,
            self::NATIONALITY_NF,
            self::NATIONALITY_NG,
            self::NATIONALITY_NI,
            self::NATIONALITY_NL,
            self::NATIONALITY_NO,
            self::NATIONALITY_NP,
            self::NATIONALITY_NR,
            self::NATIONALITY_NU,
            self::NATIONALITY_NZ,
            self::NATIONALITY_OM,
            self::NATIONALITY_PA,
            self::NATIONALITY_PE,
            self::NATIONALITY_PF,
            self::NATIONALITY_PG,
            self::NATIONALITY_PH,
            self::NATIONALITY_PK,
            self::NATIONALITY_PL,
            self::NATIONALITY_PM,
            self::NATIONALITY_PN,
            self::NATIONALITY_PR,
            self::NATIONALITY_PS,
            self::NATIONALITY_PT,
            self::NATIONALITY_PW,
            self::NATIONALITY_PY,
            self::NATIONALITY_QA,
            self::NATIONALITY_RE,
            self::NATIONALITY_RO,
            self::NATIONALITY_RS,
            self::NATIONALITY_RU,
            self::NATIONALITY_RW,
            self::NATIONALITY_SA,
            self::NATIONALITY_SB,
            self::NATIONALITY_SC,
            self::NATIONALITY_SD,
            self::NATIONALITY_SE,
            self::NATIONALITY_SG,
            self::NATIONALITY_SH,
            self::NATIONALITY_SI,
            self::NATIONALITY_SJ,
            self::NATIONALITY_SK,
            self::NATIONALITY_SL,
            self::NATIONALITY_SM,
            self::NATIONALITY_SN,
            self::NATIONALITY_SO,
            self::NATIONALITY_SR,
            self::NATIONALITY_SS,
            self::NATIONALITY_ST,
            self::NATIONALITY_SV,
            self::NATIONALITY_SX,
            self::NATIONALITY_SY,
            self::NATIONALITY_SZ,
            self::NATIONALITY_TC,
            self::NATIONALITY_TD,
            self::NATIONALITY_TF,
            self::NATIONALITY_TG,
            self::NATIONALITY_TH,
            self::NATIONALITY_TJ,
            self::NATIONALITY_TK,
            self::NATIONALITY_TL,
            self::NATIONALITY_TM,
            self::NATIONALITY_TN,
            self::NATIONALITY_TO,
            self::NATIONALITY_TR,
            self::NATIONALITY_TT,
            self::NATIONALITY_TV,
            self::NATIONALITY_TW,
            self::NATIONALITY_TZ,
            self::NATIONALITY_UA,
            self::NATIONALITY_UG,
            self::NATIONALITY_UM,
            self::NATIONALITY_US,
            self::NATIONALITY_UY,
            self::NATIONALITY_UZ,
            self::NATIONALITY_VA,
            self::NATIONALITY_VC,
            self::NATIONALITY_VE,
            self::NATIONALITY_VG,
            self::NATIONALITY_VI,
            self::NATIONALITY_VN,
            self::NATIONALITY_VU,
            self::NATIONALITY_WF,
            self::NATIONALITY_WS,
            self::NATIONALITY_YE,
            self::NATIONALITY_YT,
            self::NATIONALITY_ZA,
            self::NATIONALITY_ZM,
            self::NATIONALITY_ZW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryOfResidenceAllowableValues()
    {
        return [
            self::COUNTRY_OF_RESIDENCE_NOT_SPECIFIED,
            self::COUNTRY_OF_RESIDENCE_AD,
            self::COUNTRY_OF_RESIDENCE_AE,
            self::COUNTRY_OF_RESIDENCE_AF,
            self::COUNTRY_OF_RESIDENCE_AG,
            self::COUNTRY_OF_RESIDENCE_AI,
            self::COUNTRY_OF_RESIDENCE_AL,
            self::COUNTRY_OF_RESIDENCE_AM,
            self::COUNTRY_OF_RESIDENCE_AO,
            self::COUNTRY_OF_RESIDENCE_AQ,
            self::COUNTRY_OF_RESIDENCE_AR,
            self::COUNTRY_OF_RESIDENCE__AS,
            self::COUNTRY_OF_RESIDENCE_AT,
            self::COUNTRY_OF_RESIDENCE_AU,
            self::COUNTRY_OF_RESIDENCE_AW,
            self::COUNTRY_OF_RESIDENCE_AX,
            self::COUNTRY_OF_RESIDENCE_AZ,
            self::COUNTRY_OF_RESIDENCE_BA,
            self::COUNTRY_OF_RESIDENCE_BB,
            self::COUNTRY_OF_RESIDENCE_BD,
            self::COUNTRY_OF_RESIDENCE_BE,
            self::COUNTRY_OF_RESIDENCE_BF,
            self::COUNTRY_OF_RESIDENCE_BG,
            self::COUNTRY_OF_RESIDENCE_BH,
            self::COUNTRY_OF_RESIDENCE_BI,
            self::COUNTRY_OF_RESIDENCE_BJ,
            self::COUNTRY_OF_RESIDENCE_BL,
            self::COUNTRY_OF_RESIDENCE_BM,
            self::COUNTRY_OF_RESIDENCE_BN,
            self::COUNTRY_OF_RESIDENCE_BO,
            self::COUNTRY_OF_RESIDENCE_BQ,
            self::COUNTRY_OF_RESIDENCE_BR,
            self::COUNTRY_OF_RESIDENCE_BS,
            self::COUNTRY_OF_RESIDENCE_BT,
            self::COUNTRY_OF_RESIDENCE_BV,
            self::COUNTRY_OF_RESIDENCE_BW,
            self::COUNTRY_OF_RESIDENCE_BY,
            self::COUNTRY_OF_RESIDENCE_BZ,
            self::COUNTRY_OF_RESIDENCE_CA,
            self::COUNTRY_OF_RESIDENCE_CC,
            self::COUNTRY_OF_RESIDENCE_CD,
            self::COUNTRY_OF_RESIDENCE_CF,
            self::COUNTRY_OF_RESIDENCE_CG,
            self::COUNTRY_OF_RESIDENCE_CH,
            self::COUNTRY_OF_RESIDENCE_CI,
            self::COUNTRY_OF_RESIDENCE_CK,
            self::COUNTRY_OF_RESIDENCE_CL,
            self::COUNTRY_OF_RESIDENCE_CM,
            self::COUNTRY_OF_RESIDENCE_CN,
            self::COUNTRY_OF_RESIDENCE_CO,
            self::COUNTRY_OF_RESIDENCE_CR,
            self::COUNTRY_OF_RESIDENCE_CU,
            self::COUNTRY_OF_RESIDENCE_CV,
            self::COUNTRY_OF_RESIDENCE_CW,
            self::COUNTRY_OF_RESIDENCE_CX,
            self::COUNTRY_OF_RESIDENCE_CY,
            self::COUNTRY_OF_RESIDENCE_CZ,
            self::COUNTRY_OF_RESIDENCE_DE,
            self::COUNTRY_OF_RESIDENCE_DJ,
            self::COUNTRY_OF_RESIDENCE_DK,
            self::COUNTRY_OF_RESIDENCE_DM,
            self::COUNTRY_OF_RESIDENCE__DO,
            self::COUNTRY_OF_RESIDENCE_DZ,
            self::COUNTRY_OF_RESIDENCE_EC,
            self::COUNTRY_OF_RESIDENCE_EE,
            self::COUNTRY_OF_RESIDENCE_EG,
            self::COUNTRY_OF_RESIDENCE_EH,
            self::COUNTRY_OF_RESIDENCE_ER,
            self::COUNTRY_OF_RESIDENCE_ES,
            self::COUNTRY_OF_RESIDENCE_ET,
            self::COUNTRY_OF_RESIDENCE_FI,
            self::COUNTRY_OF_RESIDENCE_FJ,
            self::COUNTRY_OF_RESIDENCE_FK,
            self::COUNTRY_OF_RESIDENCE_FM,
            self::COUNTRY_OF_RESIDENCE_FO,
            self::COUNTRY_OF_RESIDENCE_FR,
            self::COUNTRY_OF_RESIDENCE_GA,
            self::COUNTRY_OF_RESIDENCE_GB,
            self::COUNTRY_OF_RESIDENCE_GD,
            self::COUNTRY_OF_RESIDENCE_GE,
            self::COUNTRY_OF_RESIDENCE_GF,
            self::COUNTRY_OF_RESIDENCE_GG,
            self::COUNTRY_OF_RESIDENCE_GH,
            self::COUNTRY_OF_RESIDENCE_GI,
            self::COUNTRY_OF_RESIDENCE_GL,
            self::COUNTRY_OF_RESIDENCE_GM,
            self::COUNTRY_OF_RESIDENCE_GN,
            self::COUNTRY_OF_RESIDENCE_GP,
            self::COUNTRY_OF_RESIDENCE_GQ,
            self::COUNTRY_OF_RESIDENCE_GR,
            self::COUNTRY_OF_RESIDENCE_GS,
            self::COUNTRY_OF_RESIDENCE_GT,
            self::COUNTRY_OF_RESIDENCE_GU,
            self::COUNTRY_OF_RESIDENCE_GW,
            self::COUNTRY_OF_RESIDENCE_GY,
            self::COUNTRY_OF_RESIDENCE_HK,
            self::COUNTRY_OF_RESIDENCE_HM,
            self::COUNTRY_OF_RESIDENCE_HN,
            self::COUNTRY_OF_RESIDENCE_HR,
            self::COUNTRY_OF_RESIDENCE_HT,
            self::COUNTRY_OF_RESIDENCE_HU,
            self::COUNTRY_OF_RESIDENCE_ID,
            self::COUNTRY_OF_RESIDENCE_IE,
            self::COUNTRY_OF_RESIDENCE_IL,
            self::COUNTRY_OF_RESIDENCE_IM,
            self::COUNTRY_OF_RESIDENCE_IN,
            self::COUNTRY_OF_RESIDENCE_IO,
            self::COUNTRY_OF_RESIDENCE_IQ,
            self::COUNTRY_OF_RESIDENCE_IR,
            self::COUNTRY_OF_RESIDENCE_IS,
            self::COUNTRY_OF_RESIDENCE_IT,
            self::COUNTRY_OF_RESIDENCE_JE,
            self::COUNTRY_OF_RESIDENCE_JM,
            self::COUNTRY_OF_RESIDENCE_JO,
            self::COUNTRY_OF_RESIDENCE_JP,
            self::COUNTRY_OF_RESIDENCE_KE,
            self::COUNTRY_OF_RESIDENCE_KG,
            self::COUNTRY_OF_RESIDENCE_KH,
            self::COUNTRY_OF_RESIDENCE_KI,
            self::COUNTRY_OF_RESIDENCE_KM,
            self::COUNTRY_OF_RESIDENCE_KN,
            self::COUNTRY_OF_RESIDENCE_KP,
            self::COUNTRY_OF_RESIDENCE_KR,
            self::COUNTRY_OF_RESIDENCE_KW,
            self::COUNTRY_OF_RESIDENCE_KY,
            self::COUNTRY_OF_RESIDENCE_KZ,
            self::COUNTRY_OF_RESIDENCE_LA,
            self::COUNTRY_OF_RESIDENCE_LB,
            self::COUNTRY_OF_RESIDENCE_LC,
            self::COUNTRY_OF_RESIDENCE_LI,
            self::COUNTRY_OF_RESIDENCE_LK,
            self::COUNTRY_OF_RESIDENCE_LR,
            self::COUNTRY_OF_RESIDENCE_LS,
            self::COUNTRY_OF_RESIDENCE_LT,
            self::COUNTRY_OF_RESIDENCE_LU,
            self::COUNTRY_OF_RESIDENCE_LV,
            self::COUNTRY_OF_RESIDENCE_LY,
            self::COUNTRY_OF_RESIDENCE_MA,
            self::COUNTRY_OF_RESIDENCE_MC,
            self::COUNTRY_OF_RESIDENCE_MD,
            self::COUNTRY_OF_RESIDENCE_ME,
            self::COUNTRY_OF_RESIDENCE_MF,
            self::COUNTRY_OF_RESIDENCE_MG,
            self::COUNTRY_OF_RESIDENCE_MH,
            self::COUNTRY_OF_RESIDENCE_MK,
            self::COUNTRY_OF_RESIDENCE_ML,
            self::COUNTRY_OF_RESIDENCE_MM,
            self::COUNTRY_OF_RESIDENCE_MN,
            self::COUNTRY_OF_RESIDENCE_MO,
            self::COUNTRY_OF_RESIDENCE_MP,
            self::COUNTRY_OF_RESIDENCE_MQ,
            self::COUNTRY_OF_RESIDENCE_MR,
            self::COUNTRY_OF_RESIDENCE_MS,
            self::COUNTRY_OF_RESIDENCE_MT,
            self::COUNTRY_OF_RESIDENCE_MU,
            self::COUNTRY_OF_RESIDENCE_MV,
            self::COUNTRY_OF_RESIDENCE_MW,
            self::COUNTRY_OF_RESIDENCE_MX,
            self::COUNTRY_OF_RESIDENCE_MY,
            self::COUNTRY_OF_RESIDENCE_MZ,
            self::COUNTRY_OF_RESIDENCE_NA,
            self::COUNTRY_OF_RESIDENCE_NC,
            self::COUNTRY_OF_RESIDENCE_NE,
            self::COUNTRY_OF_RESIDENCE_NF,
            self::COUNTRY_OF_RESIDENCE_NG,
            self::COUNTRY_OF_RESIDENCE_NI,
            self::COUNTRY_OF_RESIDENCE_NL,
            self::COUNTRY_OF_RESIDENCE_NO,
            self::COUNTRY_OF_RESIDENCE_NP,
            self::COUNTRY_OF_RESIDENCE_NR,
            self::COUNTRY_OF_RESIDENCE_NU,
            self::COUNTRY_OF_RESIDENCE_NZ,
            self::COUNTRY_OF_RESIDENCE_OM,
            self::COUNTRY_OF_RESIDENCE_PA,
            self::COUNTRY_OF_RESIDENCE_PE,
            self::COUNTRY_OF_RESIDENCE_PF,
            self::COUNTRY_OF_RESIDENCE_PG,
            self::COUNTRY_OF_RESIDENCE_PH,
            self::COUNTRY_OF_RESIDENCE_PK,
            self::COUNTRY_OF_RESIDENCE_PL,
            self::COUNTRY_OF_RESIDENCE_PM,
            self::COUNTRY_OF_RESIDENCE_PN,
            self::COUNTRY_OF_RESIDENCE_PR,
            self::COUNTRY_OF_RESIDENCE_PS,
            self::COUNTRY_OF_RESIDENCE_PT,
            self::COUNTRY_OF_RESIDENCE_PW,
            self::COUNTRY_OF_RESIDENCE_PY,
            self::COUNTRY_OF_RESIDENCE_QA,
            self::COUNTRY_OF_RESIDENCE_RE,
            self::COUNTRY_OF_RESIDENCE_RO,
            self::COUNTRY_OF_RESIDENCE_RS,
            self::COUNTRY_OF_RESIDENCE_RU,
            self::COUNTRY_OF_RESIDENCE_RW,
            self::COUNTRY_OF_RESIDENCE_SA,
            self::COUNTRY_OF_RESIDENCE_SB,
            self::COUNTRY_OF_RESIDENCE_SC,
            self::COUNTRY_OF_RESIDENCE_SD,
            self::COUNTRY_OF_RESIDENCE_SE,
            self::COUNTRY_OF_RESIDENCE_SG,
            self::COUNTRY_OF_RESIDENCE_SH,
            self::COUNTRY_OF_RESIDENCE_SI,
            self::COUNTRY_OF_RESIDENCE_SJ,
            self::COUNTRY_OF_RESIDENCE_SK,
            self::COUNTRY_OF_RESIDENCE_SL,
            self::COUNTRY_OF_RESIDENCE_SM,
            self::COUNTRY_OF_RESIDENCE_SN,
            self::COUNTRY_OF_RESIDENCE_SO,
            self::COUNTRY_OF_RESIDENCE_SR,
            self::COUNTRY_OF_RESIDENCE_SS,
            self::COUNTRY_OF_RESIDENCE_ST,
            self::COUNTRY_OF_RESIDENCE_SV,
            self::COUNTRY_OF_RESIDENCE_SX,
            self::COUNTRY_OF_RESIDENCE_SY,
            self::COUNTRY_OF_RESIDENCE_SZ,
            self::COUNTRY_OF_RESIDENCE_TC,
            self::COUNTRY_OF_RESIDENCE_TD,
            self::COUNTRY_OF_RESIDENCE_TF,
            self::COUNTRY_OF_RESIDENCE_TG,
            self::COUNTRY_OF_RESIDENCE_TH,
            self::COUNTRY_OF_RESIDENCE_TJ,
            self::COUNTRY_OF_RESIDENCE_TK,
            self::COUNTRY_OF_RESIDENCE_TL,
            self::COUNTRY_OF_RESIDENCE_TM,
            self::COUNTRY_OF_RESIDENCE_TN,
            self::COUNTRY_OF_RESIDENCE_TO,
            self::COUNTRY_OF_RESIDENCE_TR,
            self::COUNTRY_OF_RESIDENCE_TT,
            self::COUNTRY_OF_RESIDENCE_TV,
            self::COUNTRY_OF_RESIDENCE_TW,
            self::COUNTRY_OF_RESIDENCE_TZ,
            self::COUNTRY_OF_RESIDENCE_UA,
            self::COUNTRY_OF_RESIDENCE_UG,
            self::COUNTRY_OF_RESIDENCE_UM,
            self::COUNTRY_OF_RESIDENCE_US,
            self::COUNTRY_OF_RESIDENCE_UY,
            self::COUNTRY_OF_RESIDENCE_UZ,
            self::COUNTRY_OF_RESIDENCE_VA,
            self::COUNTRY_OF_RESIDENCE_VC,
            self::COUNTRY_OF_RESIDENCE_VE,
            self::COUNTRY_OF_RESIDENCE_VG,
            self::COUNTRY_OF_RESIDENCE_VI,
            self::COUNTRY_OF_RESIDENCE_VN,
            self::COUNTRY_OF_RESIDENCE_VU,
            self::COUNTRY_OF_RESIDENCE_WF,
            self::COUNTRY_OF_RESIDENCE_WS,
            self::COUNTRY_OF_RESIDENCE_YE,
            self::COUNTRY_OF_RESIDENCE_YT,
            self::COUNTRY_OF_RESIDENCE_ZA,
            self::COUNTRY_OF_RESIDENCE_ZM,
            self::COUNTRY_OF_RESIDENCE_ZW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPersonTypeAllowableValues()
    {
        return [
            self::PERSON_TYPE_NATURAL,
            self::PERSON_TYPE_LEGAL,
            self::PERSON_TYPE_FEES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKycLevelAllowableValues()
    {
        return [
            self::KYC_LEVEL_NOT_SPECIFIED,
            self::KYC_LEVEL_LIGHT,
            self::KYC_LEVEL_REGULAR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['birthday'] = isset($data['birthday']) ? $data['birthday'] : null;
        $this->container['nationality'] = isset($data['nationality']) ? $data['nationality'] : null;
        $this->container['country_of_residence'] = isset($data['country_of_residence']) ? $data['country_of_residence'] : null;
        $this->container['occupation'] = isset($data['occupation']) ? $data['occupation'] : null;
        $this->container['income_range'] = isset($data['income_range']) ? $data['income_range'] : null;
        $this->container['proof_of_identity'] = isset($data['proof_of_identity']) ? $data['proof_of_identity'] : null;
        $this->container['proof_of_address'] = isset($data['proof_of_address']) ? $data['proof_of_address'] : null;
        $this->container['person_type'] = isset($data['person_type']) ? $data['person_type'] : null;
        $this->container['kyc_level'] = isset($data['kyc_level']) ? $data['kyc_level'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNationalityAllowableValues();
        if (!in_array($this->container['nationality'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'nationality', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCountryOfResidenceAllowableValues();
        if (!in_array($this->container['country_of_residence'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'country_of_residence', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPersonTypeAllowableValues();
        if (!in_array($this->container['person_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'person_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getKycLevelAllowableValues();
        if (!in_array($this->container['kyc_level'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'kyc_level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getNationalityAllowableValues();
        if (!in_array($this->container['nationality'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getCountryOfResidenceAllowableValues();
        if (!in_array($this->container['country_of_residence'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getPersonTypeAllowableValues();
        if (!in_array($this->container['person_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getKycLevelAllowableValues();
        if (!in_array($this->container['kyc_level'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets address
     *
     * @return \MarketPay\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \MarketPay\Model\Address $address The address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return int
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param int $birthday The date of birth of the user - be careful to set the right timezone (should be UTC) to avoid 00h becoming 23h (and hence interpreted as the day before)
     *
     * @return $this
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string $nationality The user’s nationality. ISO 3166-1 alpha-2 format is expected
     *
     * @return $this
     */
    public function setNationality($nationality)
    {
        $allowedValues = $this->getNationalityAllowableValues();
        if (!is_null($nationality) && !in_array($nationality, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'nationality', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets country_of_residence
     *
     * @return string
     */
    public function getCountryOfResidence()
    {
        return $this->container['country_of_residence'];
    }

    /**
     * Sets country_of_residence
     *
     * @param string $country_of_residence The user’s country of residence. ISO 3166-1 alpha-2 format is expected
     *
     * @return $this
     */
    public function setCountryOfResidence($country_of_residence)
    {
        $allowedValues = $this->getCountryOfResidenceAllowableValues();
        if (!is_null($country_of_residence) && !in_array($country_of_residence, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'country_of_residence', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['country_of_residence'] = $country_of_residence;

        return $this;
    }

    /**
     * Gets occupation
     *
     * @return string
     */
    public function getOccupation()
    {
        return $this->container['occupation'];
    }

    /**
     * Sets occupation
     *
     * @param string $occupation User’s occupation, ie. Work
     *
     * @return $this
     */
    public function setOccupation($occupation)
    {
        $this->container['occupation'] = $occupation;

        return $this;
    }

    /**
     * Gets income_range
     *
     * @return int
     */
    public function getIncomeRange()
    {
        return $this->container['income_range'];
    }

    /**
     * Sets income_range
     *
     * @param int $income_range Could be only one of these values: 1 - for incomes &lt;18K€),2 - for incomes between 18 and 30K€, 3 - for incomes between 30 and 50K€, 4 - for incomes between 50 and 80K€, 5 - for incomes between 80 and 120K€, 6 - for incomes &gt;120K€
     *
     * @return $this
     */
    public function setIncomeRange($income_range)
    {
        $this->container['income_range'] = $income_range;

        return $this;
    }

    /**
     * Gets proof_of_identity
     *
     * @return string
     */
    public function getProofOfIdentity()
    {
        return $this->container['proof_of_identity'];
    }

    /**
     * Sets proof_of_identity
     *
     * @param string $proof_of_identity Proof of identity.
     *
     * @return $this
     */
    public function setProofOfIdentity($proof_of_identity)
    {
        $this->container['proof_of_identity'] = $proof_of_identity;

        return $this;
    }

    /**
     * Gets proof_of_address
     *
     * @return string
     */
    public function getProofOfAddress()
    {
        return $this->container['proof_of_address'];
    }

    /**
     * Sets proof_of_address
     *
     * @param string $proof_of_address Proof of address.
     *
     * @return $this
     */
    public function setProofOfAddress($proof_of_address)
    {
        $this->container['proof_of_address'] = $proof_of_address;

        return $this;
    }

    /**
     * Gets person_type
     *
     * @return string
     */
    public function getPersonType()
    {
        return $this->container['person_type'];
    }

    /**
     * Sets person_type
     *
     * @param string $person_type Type of user
     *
     * @return $this
     */
    public function setPersonType($person_type)
    {
        $allowedValues = $this->getPersonTypeAllowableValues();
        if (!is_null($person_type) && !in_array($person_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'person_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['person_type'] = $person_type;

        return $this;
    }

    /**
     * Gets kyc_level
     *
     * @return string
     */
    public function getKycLevel()
    {
        return $this->container['kyc_level'];
    }

    /**
     * Sets kyc_level
     *
     * @param string $kyc_level 
     *
     * @return $this
     */
    public function setKycLevel($kyc_level)
    {
        $allowedValues = $this->getKycLevelAllowableValues();
        if (!is_null($kyc_level) && !in_array($kyc_level, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'kyc_level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kyc_level'] = $kyc_level;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The user's email address - must be a valid email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The name of the user
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The last name of the user
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The item's ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return int
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param int $creation_date When the item was created
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag Custom data that you can add to this item
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


