<?php
/**
 * RedsysPayByWebPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MarketPay API
 *
 * API for Smart Contracts and Payments
 *
 * OpenAPI spec version: v2.01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RedsysPayByWebPost Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RedsysPayByWebPost implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RedsysPayByWebPost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tag' => 'string',
        'save_card' => 'bool',
        'card_id' => 'string',
        'credited_wallet_id' => 'string',
        'statement_descriptor' => 'string',
        'success_url' => 'string',
        'url_ok' => 'string',
        'cancel_url' => 'string',
        'url_ko' => 'string',
        'debited_funds' => '\Swagger\Client\Model\Money',
        'fees' => '\Swagger\Client\Model\Money'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'tag' => 'Tag',
        'save_card' => 'SaveCard',
        'card_id' => 'CardId',
        'credited_wallet_id' => 'CreditedWalletId',
        'statement_descriptor' => 'StatementDescriptor',
        'success_url' => 'SuccessUrl',
        'url_ok' => 'UrlOk',
        'cancel_url' => 'CancelUrl',
        'url_ko' => 'UrlKo',
        'debited_funds' => 'DebitedFunds',
        'fees' => 'Fees'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'tag' => 'setTag',
        'save_card' => 'setSaveCard',
        'card_id' => 'setCardId',
        'credited_wallet_id' => 'setCreditedWalletId',
        'statement_descriptor' => 'setStatementDescriptor',
        'success_url' => 'setSuccessUrl',
        'url_ok' => 'setUrlOk',
        'cancel_url' => 'setCancelUrl',
        'url_ko' => 'setUrlKo',
        'debited_funds' => 'setDebitedFunds',
        'fees' => 'setFees'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'tag' => 'getTag',
        'save_card' => 'getSaveCard',
        'card_id' => 'getCardId',
        'credited_wallet_id' => 'getCreditedWalletId',
        'statement_descriptor' => 'getStatementDescriptor',
        'success_url' => 'getSuccessUrl',
        'url_ok' => 'getUrlOk',
        'cancel_url' => 'getCancelUrl',
        'url_ko' => 'getUrlKo',
        'debited_funds' => 'getDebitedFunds',
        'fees' => 'getFees'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['save_card'] = isset($data['save_card']) ? $data['save_card'] : null;
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['credited_wallet_id'] = isset($data['credited_wallet_id']) ? $data['credited_wallet_id'] : null;
        $this->container['statement_descriptor'] = isset($data['statement_descriptor']) ? $data['statement_descriptor'] : null;
        $this->container['success_url'] = isset($data['success_url']) ? $data['success_url'] : null;
        $this->container['url_ok'] = isset($data['url_ok']) ? $data['url_ok'] : null;
        $this->container['cancel_url'] = isset($data['cancel_url']) ? $data['cancel_url'] : null;
        $this->container['url_ko'] = isset($data['url_ko']) ? $data['url_ko'] : null;
        $this->container['debited_funds'] = isset($data['debited_funds']) ? $data['debited_funds'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['credited_wallet_id'] === null) {
            $invalid_properties[] = "'credited_wallet_id' can't be null";
        }
        if ($this->container['success_url'] === null) {
            $invalid_properties[] = "'success_url' can't be null";
        }
        if ($this->container['cancel_url'] === null) {
            $invalid_properties[] = "'cancel_url' can't be null";
        }
        if ($this->container['debited_funds'] === null) {
            $invalid_properties[] = "'debited_funds' can't be null";
        }
        if ($this->container['fees'] === null) {
            $invalid_properties[] = "'fees' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['credited_wallet_id'] === null) {
            return false;
        }
        if ($this->container['success_url'] === null) {
            return false;
        }
        if ($this->container['cancel_url'] === null) {
            return false;
        }
        if ($this->container['debited_funds'] === null) {
            return false;
        }
        if ($this->container['fees'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets tag
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param string $tag Custom data that you can add to this item
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets save_card
     * @return bool
     */
    public function getSaveCard()
    {
        return $this->container['save_card'];
    }

    /**
     * Sets save_card
     * @param bool $save_card Whether to save or not the card for future use. SaveCard and CardId are mutually exclusive
     * @return $this
     */
    public function setSaveCard($save_card)
    {
        $this->container['save_card'] = $save_card;

        return $this;
    }

    /**
     * Gets card_id
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     * @param string $card_id The id of a previous saved card. SaveCard and CardId are mutually exclusive
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets credited_wallet_id
     * @return string
     */
    public function getCreditedWalletId()
    {
        return $this->container['credited_wallet_id'];
    }

    /**
     * Sets credited_wallet_id
     * @param string $credited_wallet_id The ID of the wallet where money will be credited
     * @return $this
     */
    public function setCreditedWalletId($credited_wallet_id)
    {
        $this->container['credited_wallet_id'] = $credited_wallet_id;

        return $this;
    }

    /**
     * Gets statement_descriptor
     * @return string
     */
    public function getStatementDescriptor()
    {
        return $this->container['statement_descriptor'];
    }

    /**
     * Sets statement_descriptor
     * @param string $statement_descriptor A custom description to appear on the user's bank statement. It can be up to 10 characters long, and can only include alphanumeric characters or spaces
     * @return $this
     */
    public function setStatementDescriptor($statement_descriptor)
    {
        $this->container['statement_descriptor'] = $statement_descriptor;

        return $this;
    }

    /**
     * Gets success_url
     * @return string
     */
    public function getSuccessUrl()
    {
        return $this->container['success_url'];
    }

    /**
     * Sets success_url
     * @param string $success_url DirecciÃ³n (relativa a la tienda) a la que redirigirÃ¡ cuando se haya completado el pago.
     * @return $this
     */
    public function setSuccessUrl($success_url)
    {
        $this->container['success_url'] = $success_url;

        return $this;
    }

    /**
     * Gets url_ok
     * @return string
     */
    public function getUrlOk()
    {
        return $this->container['url_ok'];
    }

    /**
     * Sets url_ok
     * @param string $url_ok Url to redirect the browser in case the payment is completed successfully
     * @return $this
     */
    public function setUrlOk($url_ok)
    {
        $this->container['url_ok'] = $url_ok;

        return $this;
    }

    /**
     * Gets cancel_url
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     * @param string $cancel_url DirecciÃ³n (relativa a la tienda) a la que redirigirÃ¡ en caso de error en el pago.
     * @return $this
     */
    public function setCancelUrl($cancel_url)
    {
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets url_ko
     * @return string
     */
    public function getUrlKo()
    {
        return $this->container['url_ko'];
    }

    /**
     * Sets url_ko
     * @param string $url_ko Url to redirect the browser in case the payment is not completed successfully
     * @return $this
     */
    public function setUrlKo($url_ko)
    {
        $this->container['url_ko'] = $url_ko;

        return $this;
    }

    /**
     * Gets debited_funds
     * @return \Swagger\Client\Model\Money
     */
    public function getDebitedFunds()
    {
        return $this->container['debited_funds'];
    }

    /**
     * Sets debited_funds
     * @param \Swagger\Client\Model\Money $debited_funds Information about the funds that are being debited
     * @return $this
     */
    public function setDebitedFunds($debited_funds)
    {
        $this->container['debited_funds'] = $debited_funds;

        return $this;
    }

    /**
     * Gets fees
     * @return \Swagger\Client\Model\Money
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     * @param \Swagger\Client\Model\Money $fees Information about the fees that were taken by the client for this transaction (and were hence transferred to the Client's platform wallet)
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


